from telethon.tl.types import MessageMediaDocument, DocumentAttributeFilename
from telethon.errors import RPCError
from domain.models import Config
from interfaces.telegram_client import create_telegram_client
from application.error_reporter import log_exception, log_rpc_error
from pathlib import Path
import re

DOWNLOAD_ROOT = Path("download/channels")

def extract_channel_name(link: str) -> str | None:
    match = re.search(r"(?:https://t.me/|@)([\w\d_]+)", link)
    return match.group(1) if match else None

async def list_and_download_channel_files(config: Config):
    client = create_telegram_client(config)
    try:
        await client.start()
        if not await client.is_user_authorized():
            print("üîí –°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ –º–µ–Ω—é '2. Connect'.")
            return
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞.")
        log_exception("client_start", e)
        return

    try:
        link = input("üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª (https://t.me/... –∏–ª–∏ @...): ").strip()
        channel_name = extract_channel_name(link)

        if not channel_name:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏.")
            return

        entity = await client.get_entity(channel_name)

        print(f"üì• –ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ: {channel_name}...")
        messages = await client.get_messages(entity, limit=500)
        documents = [msg for msg in messages if isinstance(msg.media, MessageMediaDocument)]

        if not documents:
            print("‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        print(f"\nüìã –ù–∞–π–¥–µ–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
        for i, msg in enumerate(reversed(documents), 1):
            name = next(
                (a.file_name for a in msg.document.attributes if isinstance(a, DocumentAttributeFilename)),
                "–±–µ–∑_–∏–º–µ–Ω–∏"
            )
            size_mb = round(msg.document.size / (1024 * 1024), 2)
            print(f"{i:>3}. {name} ({size_mb} MB)")

        choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é) –∏–ª–∏ 'all': ").strip().lower()
        if choice == "all":
            selected = range(1, len(documents) + 1)
        else:
            try:
                selected = [int(x.strip()) for x in choice.split(",") if x.strip().isdigit()]
            except:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥.")
                return

        target_dir = DOWNLOAD_ROOT / channel_name / "files"
        target_dir.mkdir(parents=True, exist_ok=True)

        for idx in selected:
            if not (1 <= idx <= len(documents)):
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫: –Ω–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä {idx}")
                continue
            msg = documents[-idx]
            try:
                print(f"‚¨áÔ∏è –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {idx}")
                await client.download_media(msg, file=target_dir)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ ({idx}): {e}")
                log_exception("list_channel_files.download", e)

        print(f"‚úÖ –°–∫–∞—á–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(selected)} ‚Üí {target_dir}")

    except RPCError as e:
        log_rpc_error(e)
        print(f"‚ùå RPC –æ—à–∏–±–∫–∞: {e}")
    except Exception as e:
        log_exception("list_channel_files", e)
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–æ–≤.")
    finally:
        if client.is_connected():
            await client.disconnect()
