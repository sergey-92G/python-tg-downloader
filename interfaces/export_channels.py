import os
import asyncio
from telethon import TelegramClient
from telethon.errors import RPCError
from telethon.tl.types import Channel
from telethon.tl.custom.message import Message
from datetime import datetime
from pathlib import Path
from interfaces.telegram_client import create_telegram_client
from domain.models import Config
from application.error_reporter import log_rpc_error, log_exception

DOWNLOAD_ROOT = Path("download")

def ensure_dir(path: Path):
    if not path.exists():
        print(f"üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞: {path}")
        path.mkdir(parents=True, exist_ok=True)

def format_message_md(msg: Message) -> str:
    date_str = msg.date.strftime("### %Y-%m-%d\n## %H:%M:%S")
    username = f"@{msg.sender.username}" if hasattr(msg.sender, "username") else "@unknown"
    content = msg.message or ""
    media_tag = " - (media)" if msg.media else ""
    return f"{date_str}\n{username}\n{content}{media_tag}\n\n"

async def export_channel_media_and_chat(config: Config):
    client = create_telegram_client(config)
    try:
        await client.start()
        if not await client.is_user_authorized():
            print("üîí –°–µ—Å—Å–∏—è –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ –º–µ–Ω—é '2. Connect'.")
            return
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∫–ª–∏–µ–Ω—Ç–∞.")
        log_exception("client_start", e)
        return

    try:
        print("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤...")

        channels = []
        async for dialog in client.iter_dialogs():
            if isinstance(dialog.entity, Channel) and dialog.entity.broadcast:
                channels.append(dialog)

        if not channels:
            print("‚ùå –ö–∞–Ω–∞–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            return

        print("\nüìú –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤:")
        for idx, ch in enumerate(channels, 1):
            print(f"{idx}. {ch.name}")

        selected = int(input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∞–Ω–∞–ª–∞: ")) - 1
        channel = channels[selected]
        print(f"\n‚úÖ –í—ã–±—Ä–∞–Ω –∫–∞–Ω–∞–ª: {channel.name}")

        download_dir = DOWNLOAD_ROOT / "channels" / channel.name.replace(" ", "_")
        ensure_dir(download_dir)

        try:
            messages = await client.get_messages(channel, limit=None)
        except RPCError as e:
            log_rpc_error(e)
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
            return

        print(f"üìù –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")

        save_md = []
        for msg in reversed(messages):
            save_md.append(format_message_md(msg))

            if msg.media:
                try:
                    print(f"üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–µ–¥–∏–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ {msg.id}")
                    await client.download_media(msg, file=download_dir)
                except Exception as e:
                    print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –º–µ–¥–∏–∞ (id {msg.id}): {e}")
                    log_exception("download_media", e)

        md_path = download_dir / "chat.md"
        with open(md_path, "w", encoding="utf-8") as f:
            f.writelines(save_md)

        print(f"‚úÖ –ü–µ—Ä–µ–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {md_path}")

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –∫–∞–Ω–∞–ª–∞.")
        log_exception("export_channel_media_and_chat", e)

    finally:
        if client.is_connected():
            await client.disconnect()
