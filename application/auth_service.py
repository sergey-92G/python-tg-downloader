from telethon import TelegramClient
from telethon.errors import (
    PhoneNumberInvalidError, PhoneCodeInvalidError,
    SessionPasswordNeededError, FloodWaitError, AuthKeyUnregisteredError, RPCError
)

from getpass import getpass
import logging
from domain.models import Config
from application.error_reporter import log_rpc_error, log_exception
from infrastructure.config_handler import save_config

async def authorize_user(config: Config, client: TelegramClient):
    try:
        await client.start()

        if await client.is_user_authorized():
            me = await client.get_me()
            logging.info("‚úÖ –£–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∫–∞–∫ %s (id: %d)", me.username or me.first_name, me.id)
            return

        logging.info("üîë –¢—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ %s", config.phone_number)
        await client.send_code_request(config.phone_number)
        code = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram: ")

        try:
            await client.sign_in(config.phone_number, code)
        except SessionPasswordNeededError:
            password = getpass("–í–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å: ")
            await client.sign_in(password=password)

        me = await client.get_me()
        logging.info("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞: %s (id: %d)", me.username or me.first_name, me.id)

        session_str = client.session.save() # type: ignore
        if session_str:
            config.session_str = session_str
            print("‚úÖ session_str —Å–æ–∑–¥–∞–Ω:", session_str[:50], "...")
        else:
            print("‚ùå session_str –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
        save_config(config)
        logging.info("üíæ –°–µ—Å—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞")

    except PhoneNumberInvalidError:
        logging.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
    except PhoneCodeInvalidError:
        logging.error("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥.")
    except SessionPasswordNeededError:
        logging.error("üîê –ù–µ–æ–±—Ö–æ–¥–∏–º –ø–∞—Ä–æ–ª—å 2FA.")
    except FloodWaitError as e:
        logging.error("‚è≥ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ %d —Å–µ–∫—É–Ω–¥.", e.seconds)
        log_rpc_error(e)
    except AuthKeyUnregisteredError:
        logging.error("üß® –°–µ—Å—Å–∏—è –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞. –°–±—Ä–æ—Å session_str.")
        config.session_str = None
        save_config(config)
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –≤—Ö–æ–¥–∞.")
        log_rpc_error(AuthKeyUnregisteredError())
    except RPCError as e:
        logging.error("‚ö†Ô∏è RPC –æ—à–∏–±–∫–∞: %s", e)
        log_rpc_error(e)
    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: %s", e)
        log_exception("authorize_user", e)
    # finally:
    #     if client.is_connected():
    #         await client.disconnect()

async def logout_user(config: Config, client: TelegramClient):
    try:
        await client.start()

        if not await client.is_user_authorized():
            print("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏.")
            return

        await client.log_out()
        print("üîí –°–µ—Å—Å–∏—è Telegram –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

        config.session_str = None
        save_config(config)
        logging.info("üóë session_str —É–¥–∞–ª—ë–Ω –∏–∑ config.json")

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: %s", e)
        log_exception("logout_user", e)
    finally:
        if client.is_connected():
            await client.disconnect()
