"""
This type stub file was generated by pyright.
"""

"""Errors not related to the Telegram API itself"""
class ReadCancelledError(Exception):
    """Occurs when a read operation was cancelled."""
    def __init__(self) -> None:
        ...
    


class TypeNotFoundError(Exception):
    """
    Occurs when a type is not found, for example,
    when trying to read a TLObject with an invalid constructor code.
    """
    def __init__(self, invalid_constructor_id, remaining) -> None:
        ...
    


class InvalidChecksumError(Exception):
    """
    Occurs when using the TCP full mode and the checksum of a received
    packet doesn't match the expected checksum.
    """
    def __init__(self, checksum, valid_checksum) -> None:
        ...
    


class InvalidBufferError(BufferError):
    """
    Occurs when the buffer is invalid, and may contain an HTTP error code.
    For instance, 404 means "forgotten/broken authorization key", while
    """
    def __init__(self, payload) -> None:
        ...
    


class AuthKeyNotFound(Exception):
    """
    The server claims it doesn't know about the authorization key (session
    file) currently being used. This might be because it either has never
    seen this authorization key, or it used to know about the authorization
    key but has forgotten it, either temporarily or permanently (possibly
    due to server errors).

    If the issue persists, you may need to recreate the session file and login
    again. This is not done automatically because it is not possible to know
    if the issue is temporary or permanent.
    """
    def __init__(self) -> None:
        ...
    


class SecurityError(Exception):
    """
    Generic security error, mostly used when generating a new AuthKey.
    """
    def __init__(self, *args) -> None:
        ...
    


class CdnFileTamperedError(SecurityError):
    """
    Occurs when there's a hash mismatch between the decrypted CDN file
    and its expected hash.
    """
    def __init__(self) -> None:
        ...
    


class AlreadyInConversationError(Exception):
    """
    Occurs when another exclusive conversation is opened in the same chat.
    """
    def __init__(self) -> None:
        ...
    


class BadMessageError(Exception):
    """Occurs when handling a bad_message_notification."""
    ErrorMessages = ...
    def __init__(self, request, code) -> None:
        ...
    


class MultiError(Exception):
    """Exception container for multiple `TLRequest`'s."""
    def __new__(cls, exceptions, result, requests): # -> Self:
        ...
    


