"""
This type stub file was generated by pyright.
"""

import abc

class RequestIter(abc.ABC):
    """
    Helper class to deal with requests that need offsets to iterate.

    It has some facilities, such as automatically sleeping a desired
    amount of time between requests if needed (but not more).

    Can be used synchronously if the event loop is not running and
    as an asynchronous iterator otherwise.

    `limit` is the total amount of items that the iterator should return.
    This is handled on this base class, and will be always ``>= 0``.

    `left` will be reset every time the iterator is used and will indicate
    the amount of items that should be emitted left, so that subclasses can
    be more efficient and fetch only as many items as they need.

    Iterators may be used with ``reversed``, and their `reverse` flag will
    be set to `True` if that's the case. Note that if this flag is set,
    `buffer` should be filled in reverse too.
    """
    def __init__(self, client, limit, *, reverse=..., wait_time=..., **kwargs) -> None:
        ...
    
    async def __anext__(self):
        ...
    
    def __next__(self):
        ...
    
    def __aiter__(self): # -> Self:
        ...
    
    def __iter__(self): # -> Self:
        ...
    
    async def collect(self): # -> TotalList:
        """
        Create a `self` iterator and collect it into a `TotalList`
        (a normal list with a `.total` attribute).
        """
        ...
    
    def __reversed__(self): # -> Self:
        ...
    


