"""
This type stub file was generated by pyright.
"""

import abc
from ..tl.custom.chatgetter import ChatGetter

class EventBuilder(abc.ABC):
    """
    The common event builder, with builtin support to filter per chat.

    Args:
        chats (`entity`, optional):
            May be one or more entities (username/peer/etc.), preferably IDs.
            By default, only matching chats will be handled.

        blacklist_chats (`bool`, optional):
            Whether to treat the chats as a blacklist instead of
            as a whitelist (default). This means that every chat
            will be handled *except* those specified in ``chats``
            which will be ignored if ``blacklist_chats=True``.

        func (`callable`, optional):
            A callable (async or not) function that should accept the event as input
            parameter, and return a value indicating whether the event
            should be dispatched or not (any truthy value will do, it
            does not need to be a `bool`). It works like a custom filter:

            .. code-block:: python

                @client.on(events.NewMessage(func=lambda e: e.is_private))
                async def handler(event):
                    pass  # code here
    """
    def __init__(self, chats=..., *, blacklist_chats=..., func=...) -> None:
        ...
    
    @classmethod
    @abc.abstractmethod
    def build(cls, update, others=..., self_id=...): # -> None:
        """
        Builds an event for the given update if possible, or returns None.

        `others` are the rest of updates that came in the same container
        as the current `update`.

        `self_id` should be the current user's ID, since it is required
        for some events which lack this information but still need it.
        """
        ...
    
    async def resolve(self, client): # -> None:
        """Helper method to allow event builders to be resolved before usage"""
        ...
    
    def filter(self, event): # -> Literal[True] | None:
        """
        Returns a truthy value if the event passed the filter and should be
        used, or falsy otherwise. The return value may need to be awaited.

        The events must have been resolved before this can be called.
        """
        ...
    


class EventCommon(ChatGetter, abc.ABC):
    """
    Intermediate class with common things to all events.

    Remember that this class implements `ChatGetter
    <telethon.tl.custom.chatgetter.ChatGetter>` which
    means you have access to all chat properties and methods.

    In addition, you can access the `original_update`
    field which contains the original :tl:`Update`.
    """
    _event_name = ...
    def __init__(self, chat_peer=..., msg_id=..., broadcast=...) -> None:
        ...
    
    @property
    def client(self): # -> None:
        """
        The `telethon.TelegramClient` that created this event.
        """
        ...
    
    def __str__(self) -> str:
        ...
    
    def stringify(self):
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    


def name_inner_event(cls):
    """Decorator to rename cls.Event 'Event' as 'cls.Event'"""
    ...

