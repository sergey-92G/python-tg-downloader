"""
This type stub file was generated by pyright.
"""

from .common import EventBuilder, EventCommon, name_inner_event
from ..tl.custom.sendergetter import SenderGetter

@name_inner_event
class UserUpdate(EventBuilder):
    """
    Occurs whenever a user goes online, starts typing, etc.

    Example
        .. code-block:: python

            from telethon import events

            @client.on(events.UserUpdate)
            async def handler(event):
                # If someone is uploading, say something
                if event.uploading:
                    await client.send_message(event.user_id, 'What are you sending?')
    """
    @classmethod
    def build(cls, update, others=..., self_id=...): # -> Event | None:
        ...
    
    class Event(EventCommon, SenderGetter):
        """
        Represents the event of a user update
        such as gone online, started typing, etc.

        Members:
            status (:tl:`UserStatus`, optional):
                The user status if the update is about going online or offline.

                You should check this attribute first before checking any
                of the seen within properties, since they will all be `None`
                if the status is not set.

            action (:tl:`SendMessageAction`, optional):
                The "typing" action if any the user is performing if any.

                You should check this attribute first before checking any
                of the typing properties, since they will all be `None`
                if the action is not set.
        """
        def __init__(self, peer, *, status=..., chat_peer=..., typing=...) -> None:
            ...
        
        @property
        def user(self): # -> None:
            """Alias for `sender <telethon.tl.custom.sendergetter.SenderGetter.sender>`."""
            ...
        
        async def get_user(self): # -> None:
            """Alias for `get_sender <telethon.tl.custom.sendergetter.SenderGetter.get_sender>`."""
            ...
        
        @property
        def input_user(self): # -> None:
            """Alias for `input_sender <telethon.tl.custom.sendergetter.SenderGetter.input_sender>`."""
            ...
        
        async def get_input_user(self): # -> None:
            """Alias for `get_input_sender <telethon.tl.custom.sendergetter.SenderGetter.get_input_sender>`."""
            ...
        
        @property
        def user_id(self): # -> None:
            """Alias for `sender_id <telethon.tl.custom.sendergetter.SenderGetter.sender_id>`."""
            ...
        
        @property
        @_requires_action
        def typing(self): # -> bool:
            """
            `True` if the action is typing a message.
            """
            ...
        
        @property
        @_requires_action
        def uploading(self): # -> bool:
            """
            `True` if the action is uploading something.
            """
            ...
        
        @property
        @_requires_action
        def recording(self): # -> bool:
            """
            `True` if the action is recording something.
            """
            ...
        
        @property
        @_requires_action
        def playing(self): # -> bool:
            """
            `True` if the action is playing a game.
            """
            ...
        
        @property
        @_requires_action
        def cancel(self): # -> bool:
            """
            `True` if the action was cancelling other actions.
            """
            ...
        
        @property
        @_requires_action
        def geo(self): # -> bool:
            """
            `True` if what's being uploaded is a geo.
            """
            ...
        
        @property
        @_requires_action
        def audio(self): # -> bool:
            """
            `True` if what's being recorded/uploaded is an audio.
            """
            ...
        
        @property
        @_requires_action
        def round(self): # -> bool:
            """
            `True` if what's being recorded/uploaded is a round video.
            """
            ...
        
        @property
        @_requires_action
        def video(self): # -> bool:
            """
            `True` if what's being recorded/uploaded is an video.
            """
            ...
        
        @property
        @_requires_action
        def contact(self): # -> bool:
            """
            `True` if what's being uploaded (selected) is a contact.
            """
            ...
        
        @property
        @_requires_action
        def document(self): # -> bool:
            """
            `True` if what's being uploaded is document.
            """
            ...
        
        @property
        @_requires_action
        def sticker(self): # -> bool:
            """
            `True` if what's being uploaded is a sticker.
            """
            ...
        
        @property
        @_requires_action
        def photo(self): # -> bool:
            """
            `True` if what's being uploaded is a photo.
            """
            ...
        
        @property
        @_requires_status
        def last_seen(self): # -> datetime | None:
            """
            Exact `datetime.datetime` when the user was last seen if known.
            """
            ...
        
        @property
        @_requires_status
        def until(self): # -> datetime | None:
            """
            The `datetime.datetime` until when the user should appear online.
            """
            ...
        
        @property
        @_requires_status
        def online(self): # -> bool:
            """
            `True` if the user is currently online,
            """
            ...
        
        @property
        @_requires_status
        def recently(self): # -> bool:
            """
            `True` if the user was seen within a day.
            """
            ...
        
        @property
        @_requires_status
        def within_weeks(self): # -> bool:
            """
            `True` if the user was seen within 7 days.
            """
            ...
        
        @property
        @_requires_status
        def within_months(self): # -> bool:
            """
            `True` if the user was seen within 30 days.
            """
            ...
        
    
    


