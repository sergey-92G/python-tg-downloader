"""
This type stub file was generated by pyright.
"""

from .common import EventBuilder, EventCommon, name_inner_event

@name_inner_event
class MessageRead(EventBuilder):
    """
    Occurs whenever one or more messages are read in a chat.

    Args:
        inbox (`bool`, optional):
            If this argument is `True`, then when you read someone else's
            messages the event will be fired. By default (`False`) only
            when messages you sent are read by someone else will fire it.

    Example
        .. code-block:: python

            from telethon import events

            @client.on(events.MessageRead)
            async def handler(event):
                # Log when someone reads your messages
                print('Someone has read all your messages until', event.max_id)

            @client.on(events.MessageRead(inbox=True))
            async def handler(event):
                # Log when you read message in a chat (from your "inbox")
                print('You have read messages until', event.max_id)
    """
    def __init__(self, chats=..., *, blacklist_chats=..., func=..., inbox=...) -> None:
        ...
    
    @classmethod
    def build(cls, update, others=..., self_id=...): # -> Event | None:
        ...
    
    def filter(self, event): # -> Literal[True] | None:
        ...
    
    class Event(EventCommon):
        """
        Represents the event of one or more messages being read.

        Members:
            max_id (`int`):
                Up to which message ID has been read. Every message
                with an ID equal or lower to it have been read.

            outbox (`bool`):
                `True` if someone else has read your messages.

            contents (`bool`):
                `True` if what was read were the contents of a message.
                This will be the case when e.g. you play a voice note.
                It may only be set on ``inbox`` events.
        """
        def __init__(self, peer=..., max_id=..., out=..., contents=..., message_ids=...) -> None:
            ...
        
        @property
        def inbox(self): # -> bool:
            """
            `True` if you have read someone else's messages.
            """
            ...
        
        @property
        def message_ids(self): # -> list[Any]:
            """
            The IDs of the messages **which contents'** were read.

            Use :meth:`is_read` if you need to check whether a message
            was read instead checking if it's in here.
            """
            ...
        
        async def get_messages(self): # -> list[Any]:
            """
            Returns the list of `Message <telethon.tl.custom.message.Message>`
            **which contents'** were read.

            Use :meth:`is_read` if you need to check whether a message
            was read instead checking if it's in here.
            """
            ...
        
        def is_read(self, message): # -> list[Any]:
            """
            Returns `True` if the given message (or its ID) has been read.

            If a list-like argument is provided, this method will return a
            list of booleans indicating which messages have been read.
            """
            ...
        
        def __contains__(self, message): # -> bool | list[Any]:
            """`True` if the message(s) are read message."""
            ...
        
    
    


