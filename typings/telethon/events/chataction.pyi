"""
This type stub file was generated by pyright.
"""

from .common import EventBuilder, EventCommon, name_inner_event

@name_inner_event
class ChatAction(EventBuilder):
    """
    Occurs on certain chat actions:

    * Whenever a new chat is created.
    * Whenever a chat's title or photo is changed or removed.
    * Whenever a new message is pinned.
    * Whenever a user scores in a game.
    * Whenever a user joins or is added to the group.
    * Whenever a user is removed or leaves a group if it has
      less than 50 members or the removed user was a bot.

    Note that "chat" refers to "small group, megagroup and broadcast
    channel", whereas "group" refers to "small group and megagroup" only.

    Example
        .. code-block:: python

            from telethon import events

            @client.on(events.ChatAction)
            async def handler(event):
                # Welcome every new user
                if event.user_joined:
                    await event.reply('Welcome to the group!')
    """
    @classmethod
    def build(cls, update, others=..., self_id=...):
        ...
    
    class Event(EventCommon):
        """
        Represents the event of a new chat action.

        Members:
            action_message  (`MessageAction <https://tl.telethon.dev/types/message_action.html>`_):
                The message invoked by this Chat Action.

            new_pin (`bool`):
                `True` if there is a new pin.

            new_photo (`bool`):
                `True` if there's a new chat photo (or it was removed).

            photo (:tl:`Photo`, optional):
                The new photo (or `None` if it was removed).

            user_added (`bool`):
                `True` if the user was added by some other.

            user_joined (`bool`):
                `True` if the user joined on their own.

            user_left (`bool`):
                `True` if the user left on their own.

            user_kicked (`bool`):
                `True` if the user was kicked by some other.

            created (`bool`, optional):
                `True` if this chat was just created.

            new_title (`str`, optional):
                The new title string for the chat, if applicable.

            new_score (`str`, optional):
                The new score string for the game, if applicable.

            unpin (`bool`):
                `True` if the existing pin gets unpinned.
        """
        def __init__(self, where, new_photo=..., added_by=..., kicked_by=..., created=..., users=..., new_title=..., pin_ids=..., pin=..., new_score=...) -> None:
            ...
        
        async def respond(self, *args, **kwargs):
            """
            Responds to the chat action message (not as a reply). Shorthand for
            `telethon.client.messages.MessageMethods.send_message` with
            ``entity`` already set.
            """
            ...
        
        async def reply(self, *args, **kwargs):
            """
            Replies to the chat action message (as a reply). Shorthand for
            `telethon.client.messages.MessageMethods.send_message` with
            both ``entity`` and ``reply_to`` already set.

            Has the same effect as `respond` if there is no message.
            """
            ...
        
        async def delete(self, *args, **kwargs): # -> None:
            """
            Deletes the chat action message. You're responsible for checking
            whether you have the permission to do so, or to except the error
            otherwise. Shorthand for
            `telethon.client.messages.MessageMethods.delete_messages` with
            ``entity`` and ``message_ids`` already set.

            Does nothing if no message action triggered this event.
            """
            ...
        
        async def get_pinned_message(self): # -> None:
            """
            If ``new_pin`` is `True`, this returns the `Message
            <telethon.tl.custom.message.Message>` object that was pinned.
            """
            ...
        
        async def get_pinned_messages(self): # -> None:
            """
            If ``new_pin`` is `True`, this returns a `list` of `Message
            <telethon.tl.custom.message.Message>` objects that were pinned.
            """
            ...
        
        @property
        def added_by(self): # -> User | None:
            """
            The user who added ``users``, if applicable (`None` otherwise).
            """
            ...
        
        async def get_added_by(self): # -> None:
            """
            Returns `added_by` but will make an API call if necessary.
            """
            ...
        
        @property
        def kicked_by(self): # -> User | None:
            """
            The user who kicked ``users``, if applicable (`None` otherwise).
            """
            ...
        
        async def get_kicked_by(self): # -> None:
            """
            Returns `kicked_by` but will make an API call if necessary.
            """
            ...
        
        @property
        def user(self): # -> User | UserEmpty | None:
            """
            The first user that takes part in this action. For example, who joined.

            Might be `None` if the information can't be retrieved or
            there is no user taking part.
            """
            ...
        
        async def get_user(self): # -> User | UserEmpty | None:
            """
            Returns `user` but will make an API call if necessary.
            """
            ...
        
        @property
        def input_user(self): # -> InputPeerSelf | InputPeerUser | InputPeerChat | InputPeerChannel | InputPeerUserFromMessage | InputPeerChannelFromMessage | InputPeerEmpty | None:
            """
            Input version of the ``self.user`` property.
            """
            ...
        
        async def get_input_user(self): # -> InputPeerSelf | InputPeerUser | InputPeerChat | InputPeerChannel | InputPeerUserFromMessage | InputPeerChannelFromMessage | InputPeerEmpty | None:
            """
            Returns `input_user` but will make an API call if necessary.
            """
            ...
        
        @property
        def user_id(self): # -> int | None:
            """
            Returns the marked signed ID of the first user, if any.
            """
            ...
        
        @property
        def users(self): # -> list[Any] | list[User | UserEmpty]:
            """
            A list of users that take part in this action. For example, who joined.

            Might be empty if the information can't be retrieved or there
            are no users taking part.
            """
            ...
        
        async def get_users(self): # -> list[Any] | list[User | UserEmpty] | None:
            """
            Returns `users` but will make an API call if necessary.
            """
            ...
        
        @property
        def input_users(self): # -> list[Any | InputPeerSelf | InputPeerUser | InputPeerChat | InputPeerChannel | InputPeerUserFromMessage | InputPeerChannelFromMessage | InputPeerEmpty | None]:
            """
            Input version of the ``self.users`` property.
            """
            ...
        
        async def get_input_users(self): # -> list[Any] | list[Any | InputPeerSelf | InputPeerUser | InputPeerChat | InputPeerChannel | InputPeerUserFromMessage | InputPeerChannelFromMessage | InputPeerEmpty | None]:
            """
            Returns `input_users` but will make an API call if necessary.
            """
            ...
        
        @property
        def user_ids(self): # -> list[int | Any] | None:
            """
            Returns the marked signed ID of the users, if any.
            """
            ...
        
    
    


