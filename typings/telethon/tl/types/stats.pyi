"""
This type stub file was generated by pyright.
"""

from ...tl.tlobject import TLObject
from typing import List, Optional, TYPE_CHECKING
from ...tl.types import TypeBroadcastRevenueBalances, TypeBroadcastRevenueTransaction, TypeChat, TypePostInteractionCounters, TypePublicForward, TypeStatsAbsValueAndPrev, TypeStatsDateRangeDays, TypeStatsGraph, TypeStatsGroupTopAdmin, TypeStatsGroupTopInviter, TypeStatsGroupTopPoster, TypeStatsPercentValue, TypeUser

"""File generated by TLObjects' generator. All changes will be ERASED"""
if TYPE_CHECKING:
    ...
class BroadcastRevenueStats(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, top_hours_graph: TypeStatsGraph, revenue_graph: TypeStatsGraph, balances: TypeBroadcastRevenueBalances, usd_rate: float) -> None:
        """
        Constructor for stats.BroadcastRevenueStats: Instance of BroadcastRevenueStats.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class BroadcastRevenueTransactions(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, count: int, transactions: List[TypeBroadcastRevenueTransaction]) -> None:
        """
        Constructor for stats.BroadcastRevenueTransactions: Instance of BroadcastRevenueTransactions.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class BroadcastRevenueWithdrawalUrl(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, url: str) -> None:
        """
        Constructor for stats.BroadcastRevenueWithdrawalUrl: Instance of BroadcastRevenueWithdrawalUrl.
        """
        ...
    
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class BroadcastStats(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, period: TypeStatsDateRangeDays, followers: TypeStatsAbsValueAndPrev, views_per_post: TypeStatsAbsValueAndPrev, shares_per_post: TypeStatsAbsValueAndPrev, reactions_per_post: TypeStatsAbsValueAndPrev, views_per_story: TypeStatsAbsValueAndPrev, shares_per_story: TypeStatsAbsValueAndPrev, reactions_per_story: TypeStatsAbsValueAndPrev, enabled_notifications: TypeStatsPercentValue, growth_graph: TypeStatsGraph, followers_graph: TypeStatsGraph, mute_graph: TypeStatsGraph, top_hours_graph: TypeStatsGraph, interactions_graph: TypeStatsGraph, iv_interactions_graph: TypeStatsGraph, views_by_source_graph: TypeStatsGraph, new_followers_by_source_graph: TypeStatsGraph, languages_graph: TypeStatsGraph, reactions_by_emotion_graph: TypeStatsGraph, story_interactions_graph: TypeStatsGraph, story_reactions_by_emotion_graph: TypeStatsGraph, recent_posts_interactions: List[TypePostInteractionCounters]) -> None:
        """
        Constructor for stats.BroadcastStats: Instance of BroadcastStats.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class MegagroupStats(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, period: TypeStatsDateRangeDays, members: TypeStatsAbsValueAndPrev, messages: TypeStatsAbsValueAndPrev, viewers: TypeStatsAbsValueAndPrev, posters: TypeStatsAbsValueAndPrev, growth_graph: TypeStatsGraph, members_graph: TypeStatsGraph, new_members_by_source_graph: TypeStatsGraph, languages_graph: TypeStatsGraph, messages_graph: TypeStatsGraph, actions_graph: TypeStatsGraph, top_hours_graph: TypeStatsGraph, weekdays_graph: TypeStatsGraph, top_posters: List[TypeStatsGroupTopPoster], top_admins: List[TypeStatsGroupTopAdmin], top_inviters: List[TypeStatsGroupTopInviter], users: List[TypeUser]) -> None:
        """
        Constructor for stats.MegagroupStats: Instance of MegagroupStats.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class MessageStats(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, views_graph: TypeStatsGraph, reactions_by_emotion_graph: TypeStatsGraph) -> None:
        """
        Constructor for stats.MessageStats: Instance of MessageStats.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class PublicForwards(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, count: int, forwards: List[TypePublicForward], chats: List[TypeChat], users: List[TypeUser], next_offset: Optional[str] = ...) -> None:
        """
        Constructor for stats.PublicForwards: Instance of PublicForwards.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class StoryStats(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, views_graph: TypeStatsGraph, reactions_by_emotion_graph: TypeStatsGraph) -> None:
        """
        Constructor for stats.StoryStats: Instance of StoryStats.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


