"""
This type stub file was generated by pyright.
"""

from ...tl.tlobject import TLObject
from typing import List, Optional, TYPE_CHECKING
from datetime import datetime
from ...tl.types import TypeAuthorization, TypeAutoDownloadSettings, TypeAutoSaveException, TypeAutoSaveSettings, TypeBusinessChatLink, TypeChat, TypeConnectedBot, TypeDocument, TypeEmojiStatus, TypeMessageEntity, TypePasswordKdfAlgo, TypePeer, TypePrivacyRule, TypeSecurePasswordKdfAlgo, TypeSecureRequiredType, TypeSecureSecretSettings, TypeSecureValue, TypeSecureValueError, TypeTheme, TypeUser, TypeWallPaper, TypeWebAuthorization
from ...tl.types.auth import TypeSentCode

"""File generated by TLObjects' generator. All changes will be ERASED"""
if TYPE_CHECKING:
    ...
class AuthorizationForm(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, required_types: List[TypeSecureRequiredType], values: List[TypeSecureValue], errors: List[TypeSecureValueError], users: List[TypeUser], privacy_policy_url: Optional[str] = ...) -> None:
        """
        Constructor for account.AuthorizationForm: Instance of AuthorizationForm.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class Authorizations(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, authorization_ttl_days: int, authorizations: List[TypeAuthorization]) -> None:
        """
        Constructor for account.Authorizations: Instance of Authorizations.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class AutoDownloadSettings(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, low: TypeAutoDownloadSettings, medium: TypeAutoDownloadSettings, high: TypeAutoDownloadSettings) -> None:
        """
        Constructor for account.AutoDownloadSettings: Instance of AutoDownloadSettings.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class AutoSaveSettings(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, users_settings: TypeAutoSaveSettings, chats_settings: TypeAutoSaveSettings, broadcasts_settings: TypeAutoSaveSettings, exceptions: List[TypeAutoSaveException], chats: List[TypeChat], users: List[TypeUser]) -> None:
        """
        Constructor for account.AutoSaveSettings: Instance of AutoSaveSettings.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class BusinessChatLinks(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, links: List[TypeBusinessChatLink], chats: List[TypeChat], users: List[TypeUser]) -> None:
        """
        Constructor for account.BusinessChatLinks: Instance of BusinessChatLinks.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ConnectedBots(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, connected_bots: List[TypeConnectedBot], users: List[TypeUser]) -> None:
        """
        Constructor for account.ConnectedBots: Instance of ConnectedBots.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ContentSettings(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, sensitive_enabled: Optional[bool] = ..., sensitive_can_change: Optional[bool] = ...) -> None:
        """
        Constructor for account.ContentSettings: Instance of ContentSettings.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class EmailVerified(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, email: str) -> None:
        """
        Constructor for account.EmailVerified: Instance of either EmailVerified, EmailVerifiedLogin.
        """
        ...
    
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class EmailVerifiedLogin(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, email: str, sent_code: TypeSentCode) -> None:
        """
        Constructor for account.EmailVerified: Instance of either EmailVerified, EmailVerifiedLogin.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class EmojiStatuses(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: int, statuses: List[TypeEmojiStatus]) -> None:
        """
        Constructor for account.EmojiStatuses: Instance of either EmojiStatusesNotModified, EmojiStatuses.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class EmojiStatusesNotModified(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class PaidMessagesRevenue(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, stars_amount: int) -> None:
        """
        Constructor for account.PaidMessagesRevenue: Instance of PaidMessagesRevenue.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class Password(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, new_algo: TypePasswordKdfAlgo, new_secure_algo: TypeSecurePasswordKdfAlgo, secure_random: bytes, has_recovery: Optional[bool] = ..., has_secure_values: Optional[bool] = ..., has_password: Optional[bool] = ..., current_algo: Optional[TypePasswordKdfAlgo] = ..., srp_B: Optional[bytes] = ..., srp_id: Optional[int] = ..., hint: Optional[str] = ..., email_unconfirmed_pattern: Optional[str] = ..., pending_reset_date: Optional[datetime] = ..., login_email_pattern: Optional[str] = ...) -> None:
        """
        Constructor for account.Password: Instance of Password.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class PasswordInputSettings(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, new_algo: Optional[TypePasswordKdfAlgo] = ..., new_password_hash: Optional[bytes] = ..., hint: Optional[str] = ..., email: Optional[str] = ..., new_secure_settings: Optional[TypeSecureSecretSettings] = ...) -> None:
        """
        Constructor for account.PasswordInputSettings: Instance of PasswordInputSettings.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class PasswordSettings(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, email: Optional[str] = ..., secure_settings: Optional[TypeSecureSecretSettings] = ...) -> None:
        """
        Constructor for account.PasswordSettings: Instance of PasswordSettings.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class PrivacyRules(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, rules: List[TypePrivacyRule], chats: List[TypeChat], users: List[TypeUser]) -> None:
        """
        Constructor for account.PrivacyRules: Instance of PrivacyRules.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ResetPasswordFailedWait(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, retry_date: Optional[datetime]) -> None:
        """
        Constructor for account.ResetPasswordResult: Instance of either ResetPasswordFailedWait, ResetPasswordRequestedWait, ResetPasswordOk.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ResetPasswordOk(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ResetPasswordRequestedWait(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, until_date: Optional[datetime]) -> None:
        """
        Constructor for account.ResetPasswordResult: Instance of either ResetPasswordFailedWait, ResetPasswordRequestedWait, ResetPasswordOk.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ResolvedBusinessChatLinks(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypePeer, message: str, chats: List[TypeChat], users: List[TypeUser], entities: Optional[List[TypeMessageEntity]] = ...) -> None:
        """
        Constructor for account.ResolvedBusinessChatLinks: Instance of ResolvedBusinessChatLinks.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SavedRingtone(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SavedRingtoneConverted(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, document: TypeDocument) -> None:
        """
        Constructor for account.SavedRingtone: Instance of either SavedRingtone, SavedRingtoneConverted.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SavedRingtones(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: int, ringtones: List[TypeDocument]) -> None:
        """
        Constructor for account.SavedRingtones: Instance of either SavedRingtonesNotModified, SavedRingtones.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SavedRingtonesNotModified(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SentEmailCode(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, email_pattern: str, length: int) -> None:
        """
        Constructor for account.SentEmailCode: Instance of SentEmailCode.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class Takeout(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, id: int) -> None:
        """
        Constructor for account.Takeout: Instance of Takeout.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class Themes(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: int, themes: List[TypeTheme]) -> None:
        """
        Constructor for account.Themes: Instance of either ThemesNotModified, Themes.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ThemesNotModified(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class TmpPassword(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, tmp_password: bytes, valid_until: Optional[datetime]) -> None:
        """
        Constructor for account.TmpPassword: Instance of TmpPassword.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class WallPapers(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: int, wallpapers: List[TypeWallPaper]) -> None:
        """
        Constructor for account.WallPapers: Instance of either WallPapersNotModified, WallPapers.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class WallPapersNotModified(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class WebAuthorizations(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, authorizations: List[TypeWebAuthorization], users: List[TypeUser]) -> None:
        """
        Constructor for account.WebAuthorizations: Instance of WebAuthorizations.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


