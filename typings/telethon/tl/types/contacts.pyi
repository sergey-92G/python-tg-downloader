"""
This type stub file was generated by pyright.
"""

from ...tl.tlobject import TLObject
from typing import List, TYPE_CHECKING
from ...tl.types import TypeChat, TypeContact, TypeContactBirthday, TypeImportedContact, TypePeer, TypePeerBlocked, TypePopularContact, TypeSponsoredPeer, TypeTopPeerCategoryPeers, TypeUser

"""File generated by TLObjects' generator. All changes will be ERASED"""
if TYPE_CHECKING:
    ...
class Blocked(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, blocked: List[TypePeerBlocked], chats: List[TypeChat], users: List[TypeUser]) -> None:
        """
        Constructor for contacts.Blocked: Instance of either Blocked, BlockedSlice.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class BlockedSlice(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, count: int, blocked: List[TypePeerBlocked], chats: List[TypeChat], users: List[TypeUser]) -> None:
        """
        Constructor for contacts.Blocked: Instance of either Blocked, BlockedSlice.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ContactBirthdays(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, contacts: List[TypeContactBirthday], users: List[TypeUser]) -> None:
        """
        Constructor for contacts.ContactBirthdays: Instance of ContactBirthdays.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class Contacts(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, contacts: List[TypeContact], saved_count: int, users: List[TypeUser]) -> None:
        """
        Constructor for contacts.Contacts: Instance of either ContactsNotModified, Contacts.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ContactsNotModified(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class Found(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, my_results: List[TypePeer], results: List[TypePeer], chats: List[TypeChat], users: List[TypeUser]) -> None:
        """
        Constructor for contacts.Found: Instance of Found.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ImportedContacts(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, imported: List[TypeImportedContact], popular_invites: List[TypePopularContact], retry_contacts: List[int], users: List[TypeUser]) -> None:
        """
        Constructor for contacts.ImportedContacts: Instance of ImportedContacts.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ResolvedPeer(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypePeer, chats: List[TypeChat], users: List[TypeUser]) -> None:
        """
        Constructor for contacts.ResolvedPeer: Instance of ResolvedPeer.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SponsoredPeers(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peers: List[TypeSponsoredPeer], chats: List[TypeChat], users: List[TypeUser]) -> None:
        """
        Constructor for contacts.SponsoredPeers: Instance of either SponsoredPeersEmpty, SponsoredPeers.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SponsoredPeersEmpty(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class TopPeers(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, categories: List[TypeTopPeerCategoryPeers], chats: List[TypeChat], users: List[TypeUser]) -> None:
        """
        Constructor for contacts.TopPeers: Instance of either TopPeersNotModified, TopPeers, TopPeersDisabled.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class TopPeersDisabled(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class TopPeersNotModified(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


