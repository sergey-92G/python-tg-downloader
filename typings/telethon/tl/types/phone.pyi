"""
This type stub file was generated by pyright.
"""

from ...tl.tlobject import TLObject
from typing import List, TYPE_CHECKING
from ...tl.types import TypeChat, TypeGroupCall, TypeGroupCallParticipant, TypeGroupCallStreamChannel, TypePeer, TypePhoneCall, TypeUser

"""File generated by TLObjects' generator. All changes will be ERASED"""
if TYPE_CHECKING:
    ...
class ExportedGroupCallInvite(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, link: str) -> None:
        """
        Constructor for phone.ExportedGroupCallInvite: Instance of ExportedGroupCallInvite.
        """
        ...
    
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GroupCall(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, call: TypeGroupCall, participants: List[TypeGroupCallParticipant], participants_next_offset: str, chats: List[TypeChat], users: List[TypeUser]) -> None:
        """
        Constructor for phone.GroupCall: Instance of GroupCall.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GroupCallStreamChannels(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, channels: List[TypeGroupCallStreamChannel]) -> None:
        """
        Constructor for phone.GroupCallStreamChannels: Instance of GroupCallStreamChannels.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GroupCallStreamRtmpUrl(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, url: str, key: str) -> None:
        """
        Constructor for phone.GroupCallStreamRtmpUrl: Instance of GroupCallStreamRtmpUrl.
        """
        ...
    
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GroupParticipants(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, count: int, participants: List[TypeGroupCallParticipant], next_offset: str, chats: List[TypeChat], users: List[TypeUser], version: int) -> None:
        """
        Constructor for phone.GroupParticipants: Instance of GroupParticipants.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class JoinAsPeers(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peers: List[TypePeer], chats: List[TypeChat], users: List[TypeUser]) -> None:
        """
        Constructor for phone.JoinAsPeers: Instance of JoinAsPeers.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class PhoneCall(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, phone_call: TypePhoneCall, users: List[TypeUser]) -> None:
        """
        Constructor for phone.PhoneCall: Instance of PhoneCall.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


