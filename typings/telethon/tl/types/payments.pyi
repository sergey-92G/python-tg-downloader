"""
This type stub file was generated by pyright.
"""

from ...tl.tlobject import TLObject
from typing import List, Optional, TYPE_CHECKING
from datetime import datetime
from ...tl.types import TypeBankCardOpenUrl, TypeChat, TypeConnectedBotStarRef, TypeDataJSON, TypeInvoice, TypePaymentFormMethod, TypePaymentRequestedInfo, TypePaymentSavedCredentials, TypePeer, TypeSavedStarGift, TypeShippingOption, TypeStarGift, TypeStarGiftAttribute, TypeStarRefProgram, TypeStarsAmount, TypeStarsRevenueStatus, TypeStarsSubscription, TypeStarsTransaction, TypeStatsGraph, TypeUpdates, TypeUser, TypeWebDocument

"""File generated by TLObjects' generator. All changes will be ERASED"""
if TYPE_CHECKING:
    ...
class BankCardData(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, title: str, open_urls: List[TypeBankCardOpenUrl]) -> None:
        """
        Constructor for payments.BankCardData: Instance of BankCardData.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class CheckedGiftCode(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, date: Optional[datetime], months: int, chats: List[TypeChat], users: List[TypeUser], via_giveaway: Optional[bool] = ..., from_id: Optional[TypePeer] = ..., giveaway_msg_id: Optional[int] = ..., to_id: Optional[int] = ..., used_date: Optional[datetime] = ...) -> None:
        """
        Constructor for payments.CheckedGiftCode: Instance of CheckedGiftCode.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ConnectedStarRefBots(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, count: int, connected_bots: List[TypeConnectedBotStarRef], users: List[TypeUser]) -> None:
        """
        Constructor for payments.ConnectedStarRefBots: Instance of ConnectedStarRefBots.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ExportedInvoice(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, url: str) -> None:
        """
        Constructor for payments.ExportedInvoice: Instance of ExportedInvoice.
        """
        ...
    
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GiveawayInfo(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, start_date: Optional[datetime], participating: Optional[bool] = ..., preparing_results: Optional[bool] = ..., joined_too_early_date: Optional[datetime] = ..., admin_disallowed_chat_id: Optional[int] = ..., disallowed_country: Optional[str] = ...) -> None:
        """
        Constructor for payments.GiveawayInfo: Instance of either GiveawayInfo, GiveawayInfoResults.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GiveawayInfoResults(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, start_date: Optional[datetime], finish_date: Optional[datetime], winners_count: int, winner: Optional[bool] = ..., refunded: Optional[bool] = ..., gift_code_slug: Optional[str] = ..., stars_prize: Optional[int] = ..., activated_count: Optional[int] = ...) -> None:
        """
        Constructor for payments.GiveawayInfo: Instance of either GiveawayInfo, GiveawayInfoResults.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class PaymentForm(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, form_id: int, bot_id: int, title: str, description: str, invoice: TypeInvoice, provider_id: int, url: str, users: List[TypeUser], can_save_credentials: Optional[bool] = ..., password_missing: Optional[bool] = ..., photo: Optional[TypeWebDocument] = ..., native_provider: Optional[str] = ..., native_params: Optional[TypeDataJSON] = ..., additional_methods: Optional[List[TypePaymentFormMethod]] = ..., saved_info: Optional[TypePaymentRequestedInfo] = ..., saved_credentials: Optional[List[TypePaymentSavedCredentials]] = ...) -> None:
        """
        Constructor for payments.PaymentForm: Instance of either PaymentForm, PaymentFormStars, PaymentFormStarGift.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class PaymentFormStarGift(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, form_id: int, invoice: TypeInvoice) -> None:
        """
        Constructor for payments.PaymentForm: Instance of either PaymentForm, PaymentFormStars, PaymentFormStarGift.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class PaymentFormStars(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, form_id: int, bot_id: int, title: str, description: str, invoice: TypeInvoice, users: List[TypeUser], photo: Optional[TypeWebDocument] = ...) -> None:
        """
        Constructor for payments.PaymentForm: Instance of either PaymentForm, PaymentFormStars, PaymentFormStarGift.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class PaymentReceipt(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, date: Optional[datetime], bot_id: int, provider_id: int, title: str, description: str, invoice: TypeInvoice, currency: str, total_amount: int, credentials_title: str, users: List[TypeUser], photo: Optional[TypeWebDocument] = ..., info: Optional[TypePaymentRequestedInfo] = ..., shipping: Optional[TypeShippingOption] = ..., tip_amount: Optional[int] = ...) -> None:
        """
        Constructor for payments.PaymentReceipt: Instance of either PaymentReceipt, PaymentReceiptStars.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class PaymentReceiptStars(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, date: Optional[datetime], bot_id: int, title: str, description: str, invoice: TypeInvoice, currency: str, total_amount: int, transaction_id: str, users: List[TypeUser], photo: Optional[TypeWebDocument] = ...) -> None:
        """
        Constructor for payments.PaymentReceipt: Instance of either PaymentReceipt, PaymentReceiptStars.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class PaymentResult(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, updates: TypeUpdates) -> None:
        """
        Constructor for payments.PaymentResult: Instance of either PaymentResult, PaymentVerificationNeeded.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class PaymentVerificationNeeded(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, url: str) -> None:
        """
        Constructor for payments.PaymentResult: Instance of either PaymentResult, PaymentVerificationNeeded.
        """
        ...
    
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SavedInfo(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, has_saved_credentials: Optional[bool] = ..., saved_info: Optional[TypePaymentRequestedInfo] = ...) -> None:
        """
        Constructor for payments.SavedInfo: Instance of SavedInfo.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SavedStarGifts(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, count: int, gifts: List[TypeSavedStarGift], chats: List[TypeChat], users: List[TypeUser], chat_notifications_enabled: Optional[bool] = ..., next_offset: Optional[str] = ...) -> None:
        """
        Constructor for payments.SavedStarGifts: Instance of SavedStarGifts.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class StarGiftUpgradePreview(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, sample_attributes: List[TypeStarGiftAttribute]) -> None:
        """
        Constructor for payments.StarGiftUpgradePreview: Instance of StarGiftUpgradePreview.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class StarGiftWithdrawalUrl(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, url: str) -> None:
        """
        Constructor for payments.StarGiftWithdrawalUrl: Instance of StarGiftWithdrawalUrl.
        """
        ...
    
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class StarGifts(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: int, gifts: List[TypeStarGift]) -> None:
        """
        Constructor for payments.StarGifts: Instance of either StarGiftsNotModified, StarGifts.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class StarGiftsNotModified(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class StarsRevenueAdsAccountUrl(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, url: str) -> None:
        """
        Constructor for payments.StarsRevenueAdsAccountUrl: Instance of StarsRevenueAdsAccountUrl.
        """
        ...
    
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class StarsRevenueStats(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, revenue_graph: TypeStatsGraph, status: TypeStarsRevenueStatus, usd_rate: float) -> None:
        """
        Constructor for payments.StarsRevenueStats: Instance of StarsRevenueStats.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class StarsRevenueWithdrawalUrl(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, url: str) -> None:
        """
        Constructor for payments.StarsRevenueWithdrawalUrl: Instance of StarsRevenueWithdrawalUrl.
        """
        ...
    
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class StarsStatus(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, balance: TypeStarsAmount, chats: List[TypeChat], users: List[TypeUser], subscriptions: Optional[List[TypeStarsSubscription]] = ..., subscriptions_next_offset: Optional[str] = ..., subscriptions_missing_balance: Optional[int] = ..., history: Optional[List[TypeStarsTransaction]] = ..., next_offset: Optional[str] = ...) -> None:
        """
        Constructor for payments.StarsStatus: Instance of StarsStatus.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SuggestedStarRefBots(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, count: int, suggested_bots: List[TypeStarRefProgram], users: List[TypeUser], next_offset: Optional[str] = ...) -> None:
        """
        Constructor for payments.SuggestedStarRefBots: Instance of SuggestedStarRefBots.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class UniqueStarGift(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, gift: TypeStarGift, users: List[TypeUser]) -> None:
        """
        Constructor for payments.UniqueStarGift: Instance of UniqueStarGift.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ValidatedRequestedInfo(TLObject):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, id: Optional[str] = ..., shipping_options: Optional[List[TypeShippingOption]] = ...) -> None:
        """
        Constructor for payments.ValidatedRequestedInfo: Instance of ValidatedRequestedInfo.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


