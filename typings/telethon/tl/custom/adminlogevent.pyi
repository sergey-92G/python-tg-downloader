"""
This type stub file was generated by pyright.
"""

class AdminLogEvent:
    """
    Represents a more friendly interface for admin log events.

    Members:
        original (:tl:`ChannelAdminLogEvent`):
            The original :tl:`ChannelAdminLogEvent`.

        entities (`dict`):
            A dictionary mapping user IDs to :tl:`User`.

            When `old` and `new` are :tl:`ChannelParticipant`, you can
            use this dictionary to map the ``user_id``, ``kicked_by``,
            ``inviter_id`` and ``promoted_by`` IDs to their :tl:`User`.

        user (:tl:`User`):
            The user that caused this action (``entities[original.user_id]``).

        input_user (:tl:`InputPeerUser`):
            Input variant of `user`.
    """
    def __init__(self, original, entities) -> None:
        ...
    
    @property
    def id(self):
        """
        The ID of this event.
        """
        ...
    
    @property
    def date(self):
        """
        The date when this event occurred.
        """
        ...
    
    @property
    def user_id(self):
        """
        The ID of the user that triggered this event.
        """
        ...
    
    @property
    def action(self):
        """
        The original :tl:`ChannelAdminLogEventAction`.
        """
        ...
    
    @property
    def old(self): # -> TypeChannelLocation | TypePhoto | TypeInputStickerSet | TypeMessage | TypeChannelParticipant | TypeExportedChatInvite | str | int | bool | TypeChatBannedRights | TypeInputGroupCall | None:
        """
        The old value from the event.
        """
        ...
    
    @property
    def new(self): # -> TypeChannelLocation | TypePhoto | TypeInputStickerSet | TypeMessage | TypeChannelParticipant | TypeExportedChatInvite | str | bool | int | TypeGroupCallParticipant | TypeChatBannedRights | TypeInputGroupCall | None:
        """
        The new value present in the event.
        """
        ...
    
    @property
    def changed_about(self): # -> bool:
        """
        Whether the channel's about was changed or not.

        If `True`, `old` and `new` will be present as `str`.
        """
        ...
    
    @property
    def changed_title(self): # -> bool:
        """
        Whether the channel's title was changed or not.

        If `True`, `old` and `new` will be present as `str`.
        """
        ...
    
    @property
    def changed_username(self): # -> bool:
        """
        Whether the channel's username was changed or not.

        If `True`, `old` and `new` will be present as `str`.
        """
        ...
    
    @property
    def changed_photo(self): # -> bool:
        """
        Whether the channel's photo was changed or not.

        If `True`, `old` and `new` will be present as :tl:`Photo`.
        """
        ...
    
    @property
    def changed_sticker_set(self): # -> bool:
        """
        Whether the channel's sticker set was changed or not.

        If `True`, `old` and `new` will be present as :tl:`InputStickerSet`.
        """
        ...
    
    @property
    def changed_message(self): # -> bool:
        """
        Whether a message in this channel was edited or not.

        If `True`, `old` and `new` will be present as
        `Message <telethon.tl.custom.message.Message>`.
        """
        ...
    
    @property
    def deleted_message(self): # -> bool:
        """
        Whether a message in this channel was deleted or not.

        If `True`, `old` will be present as
        `Message <telethon.tl.custom.message.Message>`.
        """
        ...
    
    @property
    def changed_admin(self): # -> bool:
        """
        Whether the permissions for an admin in this channel
        changed or not.

        If `True`, `old` and `new` will be present as
        :tl:`ChannelParticipant`.
        """
        ...
    
    @property
    def changed_restrictions(self): # -> bool:
        """
        Whether a message in this channel was edited or not.

        If `True`, `old` and `new` will be present as
        :tl:`ChannelParticipant`.
        """
        ...
    
    @property
    def changed_invites(self): # -> bool:
        """
        Whether the invites in the channel were toggled or not.

        If `True`, `old` and `new` will be present as `bool`.
        """
        ...
    
    @property
    def changed_location(self): # -> bool:
        """
        Whether the location setting of the channel has changed or not.

        If `True`, `old` and `new` will be present as :tl:`ChannelLocation`.
        """
        ...
    
    @property
    def joined(self): # -> bool:
        """
        Whether `user` joined through the channel's
        public username or not.
        """
        ...
    
    @property
    def joined_invite(self): # -> bool:
        """
        Whether a new user joined through an invite
        link to the channel or not.

        If `True`, `new` will be present as
        :tl:`ChannelParticipant`.
        """
        ...
    
    @property
    def left(self): # -> bool:
        """
        Whether `user` left the channel or not.
        """
        ...
    
    @property
    def changed_hide_history(self): # -> bool:
        """
        Whether hiding the previous message history for new members
        in the channel was toggled or not.

        If `True`, `old` and `new` will be present as `bool`.
        """
        ...
    
    @property
    def changed_signatures(self): # -> bool:
        """
        Whether the message signatures in the channel were toggled
        or not.

        If `True`, `old` and `new` will be present as `bool`.
        """
        ...
    
    @property
    def changed_pin(self): # -> bool:
        """
        Whether a new message in this channel was pinned or not.

        If `True`, `new` will be present as
        `Message <telethon.tl.custom.message.Message>`.
        """
        ...
    
    @property
    def changed_default_banned_rights(self): # -> bool:
        """
        Whether the default banned rights were changed or not.

        If `True`, `old` and `new` will
        be present as :tl:`ChatBannedRights`.
        """
        ...
    
    @property
    def stopped_poll(self): # -> bool:
        """
        Whether a poll was stopped or not.

        If `True`, `new` will be present as
        `Message <telethon.tl.custom.message.Message>`.
        """
        ...
    
    @property
    def started_group_call(self): # -> bool:
        """
        Whether a group call was started or not.

        If `True`, `new` will be present as :tl:`InputGroupCall`.
        """
        ...
    
    @property
    def discarded_group_call(self): # -> bool:
        """
        Whether a group call was started or not.

        If `True`, `old` will be present as :tl:`InputGroupCall`.
        """
        ...
    
    @property
    def user_muted(self): # -> bool:
        """
        Whether a participant was muted in the ongoing group call or not.

        If `True`, `new` will be present as :tl:`GroupCallParticipant`.
        """
        ...
    
    @property
    def user_unmutted(self): # -> bool:
        """
        Whether a participant was unmuted from the ongoing group call or not.

        If `True`, `new` will be present as :tl:`GroupCallParticipant`.
        """
        ...
    
    @property
    def changed_call_settings(self): # -> bool:
        """
        Whether the group call settings were changed or not.

        If `True`, `new` will be `True` if new users are muted on join.
        """
        ...
    
    @property
    def changed_history_ttl(self): # -> bool:
        """
        Whether the Time To Live of the message history has changed.

        Messages sent after this change will have a ``ttl_period`` in seconds
        indicating how long they should live for before being auto-deleted.

        If `True`, `old` will be the old TTL, and `new` the new TTL, in seconds.
        """
        ...
    
    @property
    def deleted_exported_invite(self): # -> bool:
        """
        Whether the exported chat invite has been deleted.

        If `True`, `old` will be the deleted :tl:`ExportedChatInvite`.
        """
        ...
    
    @property
    def edited_exported_invite(self): # -> bool:
        """
        Whether the exported chat invite has been edited.

        If `True`, `old` and `new` will be the old and new
        :tl:`ExportedChatInvite`, respectively.
        """
        ...
    
    @property
    def revoked_exported_invite(self): # -> bool:
        """
        Whether the exported chat invite has been revoked.

        If `True`, `old` will be the revoked :tl:`ExportedChatInvite`.
        """
        ...
    
    @property
    def joined_by_invite(self): # -> bool:
        """
        Whether a new participant has joined with the use of an invite link.

        If `True`, `old` will be pre-existing (old) :tl:`ExportedChatInvite`
        used to join.
        """
        ...
    
    @property
    def changed_user_volume(self): # -> bool:
        """
        Whether a participant's volume in a call has been changed.

        If `True`, `new` will be the updated :tl:`GroupCallParticipant`.
        """
        ...
    
    def __str__(self) -> str:
        ...
    
    def stringify(self):
        ...
    


