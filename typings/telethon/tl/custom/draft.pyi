"""
This type stub file was generated by pyright.
"""

class Draft:
    """
    Custom class that encapsulates a draft on the Telegram servers, providing
    an abstraction to change the message conveniently. The library will return
    instances of this class when calling :meth:`get_drafts()`.

    Args:
        date (`datetime`):
            The date of the draft.

        link_preview (`bool`):
            Whether the link preview is enabled or not.

        reply_to_msg_id (`int`):
            The message ID that the draft will reply to.
    """
    def __init__(self, client, entity, draft) -> None:
        ...
    
    @property
    def entity(self): # -> Any:
        """
        The entity that belongs to this dialog (user, chat or channel).
        """
        ...
    
    @property
    def input_entity(self): # -> InputPeerSelf | InputPeerUser | InputPeerChat | InputPeerChannel | InputPeerUserFromMessage | InputPeerChannelFromMessage | InputPeerEmpty | None:
        """
        Input version of the entity.
        """
        ...
    
    async def get_entity(self): # -> Any:
        """
        Returns `entity` but will make an API call if necessary.
        """
        ...
    
    async def get_input_entity(self): # -> InputPeerSelf | InputPeerUser | InputPeerChat | InputPeerChannel | InputPeerUserFromMessage | InputPeerChannelFromMessage | InputPeerEmpty | None:
        """
        Returns `input_entity` but will make an API call if necessary.
        """
        ...
    
    @property
    def text(self): # -> str:
        """
        The markdown text contained in the draft. It will be
        empty if there is no text (and hence no draft is set).
        """
        ...
    
    @property
    def raw_text(self): # -> str:
        """
        The raw (text without formatting) contained in the draft.
        It will be empty if there is no text (thus draft not set).
        """
        ...
    
    @property
    def is_empty(self): # -> bool:
        """
        Convenience bool to determine if the draft is empty or not.
        """
        ...
    
    async def set_message(self, text=..., reply_to=..., parse_mode=..., link_preview=...):
        """
        Changes the draft message on the Telegram servers. The changes are
        reflected in this object.

        :param str text: New text of the draft.
                         Preserved if left as None.

        :param int reply_to: Message ID to reply to.
                             Preserved if left as 0, erased if set to None.

        :param bool link_preview: Whether to attach a web page preview.
                                  Preserved if left as None.

        :param str parse_mode: The parse mode to be used for the text.
        :return bool: `True` on success.
        """
        ...
    
    async def send(self, clear=..., parse_mode=...): # -> None:
        """
        Sends the contents of this draft to the dialog. This is just a
        wrapper around ``send_message(dialog.input_entity, *args, **kwargs)``.
        """
        ...
    
    async def delete(self):
        """
        Deletes this draft, and returns `True` on success.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    def __str__(self) -> str:
        ...
    
    def stringify(self):
        ...
    


