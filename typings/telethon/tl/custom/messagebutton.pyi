"""
This type stub file was generated by pyright.
"""

class MessageButton:
    """
    .. note::

        `Message.buttons <telethon.tl.custom.message.Message.buttons>`
        are instances of this type. If you want to **define** a reply
        markup for e.g. sending messages, refer to `Button
        <telethon.tl.custom.button.Button>` instead.

    Custom class that encapsulates a message button providing
    an abstraction to easily access some commonly needed features
    (such as clicking the button itself).

    Attributes:

        button (:tl:`KeyboardButton`):
            The original :tl:`KeyboardButton` object.
    """
    def __init__(self, client, original, chat, bot, msg_id) -> None:
        ...
    
    @property
    def client(self): # -> Any:
        """
        Returns the `telethon.client.telegramclient.TelegramClient`
        instance that created this instance.
        """
        ...
    
    @property
    def text(self):
        """The text string of the button."""
        ...
    
    @property
    def data(self): # -> bytes | None:
        """The `bytes` data for :tl:`KeyboardButtonCallback` objects."""
        ...
    
    @property
    def inline_query(self): # -> str | None:
        """The query `str` for :tl:`KeyboardButtonSwitchInline` objects."""
        ...
    
    @property
    def url(self): # -> str | None:
        """The url `str` for :tl:`KeyboardButtonUrl` objects."""
        ...
    
    async def click(self, share_phone=..., share_geo=..., *, password=...): # -> bool | None:
        """
        Emulates the behaviour of clicking this button.

        If it's a normal :tl:`KeyboardButton` with text, a message will be
        sent, and the sent `Message <telethon.tl.custom.message.Message>` returned.

        If it's an inline :tl:`KeyboardButtonCallback` with text and data,
        it will be "clicked" and the :tl:`BotCallbackAnswer` returned.

        If it's an inline :tl:`KeyboardButtonSwitchInline` button, the
        :tl:`StartBotRequest` will be invoked and the resulting updates
        returned.

        If it's a :tl:`KeyboardButtonUrl`, the URL of the button will
        be passed to ``webbrowser.open`` and return `True` on success.

        If it's a :tl:`KeyboardButtonRequestPhone`, you must indicate that you
        want to ``share_phone=True`` in order to share it. Sharing it is not a
        default because it is a privacy concern and could happen accidentally.

        You may also use ``share_phone=phone`` to share a specific number, in
        which case either `str` or :tl:`InputMediaContact` should be used.

        If it's a :tl:`KeyboardButtonRequestGeoLocation`, you must pass a
        tuple in ``share_geo=(longitude, latitude)``. Note that Telegram seems
        to have some heuristics to determine impossible locations, so changing
        this value a lot quickly may not work as expected. You may also pass a
        :tl:`InputGeoPoint` if you find the order confusing.
        """
        ...
    


