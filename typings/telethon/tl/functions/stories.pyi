"""
This type stub file was generated by pyright.
"""

from ...tl.tlobject import TLRequest
from typing import List, Optional, TYPE_CHECKING
from ...tl.types import TypeInputMedia, TypeInputPeer, TypeInputPrivacyRule, TypeMediaArea, TypeMessageEntity, TypeReaction

"""File generated by TLObjects' generator. All changes will be ERASED"""
if TYPE_CHECKING:
    ...
class ActivateStealthModeRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, past: Optional[bool] = ..., future: Optional[bool] = ...) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class CanSendStoryRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class DeleteStoriesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: List[int]) -> None:
        """
        :returns Vector<int>: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    
    @staticmethod
    def read_result(reader): # -> list[Any]:
        ...
    


class EditStoryRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: int, media: Optional[TypeInputMedia] = ..., media_areas: Optional[List[TypeMediaArea]] = ..., caption: Optional[str] = ..., entities: Optional[List[TypeMessageEntity]] = ..., privacy_rules: Optional[List[TypeInputPrivacyRule]] = ...) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ExportStoryLinkRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: int) -> None:
        """
        :returns ExportedStoryLink: Instance of ExportedStoryLink.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetAllReadPeerStoriesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetAllStoriesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, next: Optional[bool] = ..., hidden: Optional[bool] = ..., state: Optional[str] = ...) -> None:
        """
        :returns stories.AllStories: Instance of either AllStoriesNotModified, AllStories.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetChatsToSendRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetPeerMaxIDsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, id: List[TypeInputPeer]) -> None:
        """
        :returns Vector<int>: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    
    @staticmethod
    def read_result(reader): # -> list[Any]:
        ...
    


class GetPeerStoriesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer) -> None:
        """
        :returns stories.PeerStories: Instance of PeerStories.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetPinnedStoriesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, offset_id: int, limit: int) -> None:
        """
        :returns stories.Stories: Instance of Stories.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetStoriesArchiveRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, offset_id: int, limit: int) -> None:
        """
        :returns stories.Stories: Instance of Stories.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetStoriesByIDRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: List[int]) -> None:
        """
        :returns stories.Stories: Instance of Stories.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetStoriesViewsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: List[int]) -> None:
        """
        :returns stories.StoryViews: Instance of StoryViews.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetStoryReactionsListRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: int, limit: int, forwards_first: Optional[bool] = ..., reaction: Optional[TypeReaction] = ..., offset: Optional[str] = ...) -> None:
        """
        :returns stories.StoryReactionsList: Instance of StoryReactionsList.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetStoryViewsListRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: int, offset: str, limit: int, just_contacts: Optional[bool] = ..., reactions_first: Optional[bool] = ..., forwards_first: Optional[bool] = ..., q: Optional[str] = ...) -> None:
        """
        :returns stories.StoryViewsList: Instance of StoryViewsList.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class IncrementStoryViewsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: List[int]) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ReadStoriesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, max_id: int) -> None:
        """
        :returns Vector<int>: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    
    @staticmethod
    def read_result(reader): # -> list[Any]:
        ...
    


class ReportRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: List[int], option: bytes, message: str) -> None:
        """
        :returns ReportResult: Instance of either ReportResultChooseOption, ReportResultAddComment, ReportResultReported.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SearchPostsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, offset: str, limit: int, hashtag: Optional[str] = ..., area: Optional[TypeMediaArea] = ..., peer: Optional[TypeInputPeer] = ...) -> None:
        """
        :returns stories.FoundStories: Instance of FoundStories.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SendReactionRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, story_id: int, reaction: TypeReaction, add_to_recent: Optional[bool] = ...) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SendStoryRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, media: TypeInputMedia, privacy_rules: List[TypeInputPrivacyRule], pinned: Optional[bool] = ..., noforwards: Optional[bool] = ..., fwd_modified: Optional[bool] = ..., media_areas: Optional[List[TypeMediaArea]] = ..., caption: Optional[str] = ..., entities: Optional[List[TypeMessageEntity]] = ..., random_id: int = ..., period: Optional[int] = ..., fwd_from_id: Optional[TypeInputPeer] = ..., fwd_from_story: Optional[int] = ...) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ToggleAllStoriesHiddenRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hidden: bool) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class TogglePeerStoriesHiddenRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, hidden: bool) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class TogglePinnedRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: List[int], pinned: bool) -> None:
        """
        :returns Vector<int>: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    
    @staticmethod
    def read_result(reader): # -> list[Any]:
        ...
    


class TogglePinnedToTopRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: List[int]) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


