"""
This type stub file was generated by pyright.
"""

from ...tl.tlobject import TLRequest
from typing import List, Optional, TYPE_CHECKING
from ...tl.types import TypeInputChatlist, TypeInputPeer

"""File generated by TLObjects' generator. All changes will be ERASED"""
if TYPE_CHECKING:
    ...
class CheckChatlistInviteRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, slug: str) -> None:
        """
        :returns chatlists.ChatlistInvite: Instance of either ChatlistInviteAlready, ChatlistInvite.
        """
        ...
    
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class DeleteExportedInviteRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, chatlist: TypeInputChatlist, slug: str) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class EditExportedInviteRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, chatlist: TypeInputChatlist, slug: str, title: Optional[str] = ..., peers: Optional[List[TypeInputPeer]] = ...) -> None:
        """
        :returns ExportedChatlistInvite: Instance of ExportedChatlistInvite.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ExportChatlistInviteRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, chatlist: TypeInputChatlist, title: str, peers: List[TypeInputPeer]) -> None:
        """
        :returns chatlists.ExportedChatlistInvite: Instance of ExportedChatlistInvite.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetChatlistUpdatesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, chatlist: TypeInputChatlist) -> None:
        """
        :returns chatlists.ChatlistUpdates: Instance of ChatlistUpdates.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetExportedInvitesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, chatlist: TypeInputChatlist) -> None:
        """
        :returns chatlists.ExportedInvites: Instance of ExportedInvites.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetLeaveChatlistSuggestionsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, chatlist: TypeInputChatlist) -> None:
        """
        :returns Vector<Peer>: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class HideChatlistUpdatesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, chatlist: TypeInputChatlist) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class JoinChatlistInviteRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, slug: str, peers: List[TypeInputPeer]) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class JoinChatlistUpdatesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, chatlist: TypeInputChatlist, peers: List[TypeInputPeer]) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class LeaveChatlistRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, chatlist: TypeInputChatlist, peers: List[TypeInputPeer]) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


