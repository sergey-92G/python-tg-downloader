"""
This type stub file was generated by pyright.
"""

from ...tl.tlobject import TLRequest
from typing import Optional, TYPE_CHECKING
from datetime import datetime
from ...tl.types import TypeChannelMessagesFilter, TypeInputChannel

"""File generated by TLObjects' generator. All changes will be ERASED"""
if TYPE_CHECKING:
    ...
class GetChannelDifferenceRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, channel: TypeInputChannel, filter: TypeChannelMessagesFilter, pts: int, limit: int, force: Optional[bool] = ...) -> None:
        """
        :returns updates.ChannelDifference: Instance of either ChannelDifferenceEmpty, ChannelDifferenceTooLong, ChannelDifference.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetDifferenceRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, pts: int, date: Optional[datetime], qts: int, pts_limit: Optional[int] = ..., pts_total_limit: Optional[int] = ..., qts_limit: Optional[int] = ...) -> None:
        """
        :returns updates.Difference: Instance of either DifferenceEmpty, Difference, DifferenceSlice, DifferenceTooLong.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetStateRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


