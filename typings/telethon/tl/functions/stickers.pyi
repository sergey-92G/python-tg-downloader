"""
This type stub file was generated by pyright.
"""

from ...tl.tlobject import TLRequest
from typing import List, Optional, TYPE_CHECKING
from ...tl.types import TypeInputDocument, TypeInputStickerSet, TypeInputStickerSetItem, TypeInputUser, TypeMaskCoords

"""File generated by TLObjects' generator. All changes will be ERASED"""
if TYPE_CHECKING:
    ...
class AddStickerToSetRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, stickerset: TypeInputStickerSet, sticker: TypeInputStickerSetItem) -> None:
        """
        :returns messages.StickerSet: Instance of either StickerSet, StickerSetNotModified.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ChangeStickerRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, sticker: TypeInputDocument, emoji: Optional[str] = ..., mask_coords: Optional[TypeMaskCoords] = ..., keywords: Optional[str] = ...) -> None:
        """
        :returns messages.StickerSet: Instance of either StickerSet, StickerSetNotModified.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ChangeStickerPositionRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, sticker: TypeInputDocument, position: int) -> None:
        """
        :returns messages.StickerSet: Instance of either StickerSet, StickerSetNotModified.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class CheckShortNameRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, short_name: str) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class CreateStickerSetRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, user_id: TypeInputUser, title: str, short_name: str, stickers: List[TypeInputStickerSetItem], masks: Optional[bool] = ..., emojis: Optional[bool] = ..., text_color: Optional[bool] = ..., thumb: Optional[TypeInputDocument] = ..., software: Optional[str] = ...) -> None:
        """
        :returns messages.StickerSet: Instance of either StickerSet, StickerSetNotModified.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class DeleteStickerSetRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, stickerset: TypeInputStickerSet) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class RemoveStickerFromSetRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, sticker: TypeInputDocument) -> None:
        """
        :returns messages.StickerSet: Instance of either StickerSet, StickerSetNotModified.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class RenameStickerSetRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, stickerset: TypeInputStickerSet, title: str) -> None:
        """
        :returns messages.StickerSet: Instance of either StickerSet, StickerSetNotModified.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ReplaceStickerRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, sticker: TypeInputDocument, new_sticker: TypeInputStickerSetItem) -> None:
        """
        :returns messages.StickerSet: Instance of either StickerSet, StickerSetNotModified.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SetStickerSetThumbRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, stickerset: TypeInputStickerSet, thumb: Optional[TypeInputDocument] = ..., thumb_document_id: Optional[int] = ...) -> None:
        """
        :returns messages.StickerSet: Instance of either StickerSet, StickerSetNotModified.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SuggestShortNameRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, title: str) -> None:
        """
        :returns stickers.SuggestedShortName: Instance of SuggestedShortName.
        """
        ...
    
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


