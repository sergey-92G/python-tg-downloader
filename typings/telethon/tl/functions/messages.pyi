"""
This type stub file was generated by pyright.
"""

from ...tl.tlobject import TLRequest
from typing import List, Optional, TYPE_CHECKING
from datetime import datetime
from ...tl.types import TypeChatBannedRights, TypeChatReactions, TypeDataJSON, TypeDialogFilter, TypeInlineBotSwitchPM, TypeInlineBotWebView, TypeInlineQueryPeerType, TypeInputBotApp, TypeInputBotInlineMessageID, TypeInputBotInlineResult, TypeInputChatPhoto, TypeInputCheckPasswordSRP, TypeInputDialogPeer, TypeInputDocument, TypeInputEncryptedChat, TypeInputEncryptedFile, TypeInputFile, TypeInputGeoPoint, TypeInputMedia, TypeInputMessage, TypeInputPeer, TypeInputQuickReplyShortcut, TypeInputReplyTo, TypeInputSingleMedia, TypeInputStickerSet, TypeInputStickeredMedia, TypeInputUser, TypeInputWallPaper, TypeMessageEntity, TypeMessagesFilter, TypePaidReactionPrivacy, TypeReaction, TypeReplyMarkup, TypeSendMessageAction, TypeShippingOption, TypeStarsSubscriptionPricing, TypeTextWithEntities, TypeWallPaperSettings

"""File generated by TLObjects' generator. All changes will be ERASED"""
if TYPE_CHECKING:
    ...
class AcceptEncryptionRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputEncryptedChat, g_b: bytes, key_fingerprint: int) -> None:
        """
        :returns EncryptedChat: Instance of either EncryptedChatEmpty, EncryptedChatWaiting, EncryptedChatRequested, EncryptedChat, EncryptedChatDiscarded.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class AcceptUrlAuthRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, write_allowed: Optional[bool] = ..., peer: Optional[TypeInputPeer] = ..., msg_id: Optional[int] = ..., button_id: Optional[int] = ..., url: Optional[str] = ...) -> None:
        """
        :returns UrlAuthResult: Instance of either UrlAuthResultRequest, UrlAuthResultAccepted, UrlAuthResultDefault.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class AddChatUserRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, chat_id: int, user_id: TypeInputUser, fwd_limit: int) -> None:
        """
        :returns messages.InvitedUsers: Instance of InvitedUsers.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class CheckChatInviteRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: str) -> None:
        """
        :returns ChatInvite: Instance of either ChatInviteAlready, ChatInvite, ChatInvitePeek.
        """
        ...
    
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class CheckHistoryImportRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, import_head: str) -> None:
        """
        :returns messages.HistoryImportParsed: Instance of HistoryImportParsed.
        """
        ...
    
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class CheckHistoryImportPeerRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer) -> None:
        """
        :returns messages.CheckedHistoryImportPeer: Instance of CheckedHistoryImportPeer.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class CheckQuickReplyShortcutRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, shortcut: str) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ClearAllDraftsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ClearRecentReactionsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ClearRecentStickersRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, attached: Optional[bool] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ClickSponsoredMessageRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, media: Optional[bool] = ..., fullscreen: Optional[bool] = ..., random_id: bytes = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class CreateChatRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, users: List[TypeInputUser], title: str, ttl_period: Optional[int] = ...) -> None:
        """
        :returns messages.InvitedUsers: Instance of InvitedUsers.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class DeleteChatRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, chat_id: int) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class DeleteChatUserRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, chat_id: int, user_id: TypeInputUser, revoke_history: Optional[bool] = ...) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class DeleteExportedChatInviteRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, link: str) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class DeleteFactCheckRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, msg_id: int) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class DeleteHistoryRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, max_id: int, just_clear: Optional[bool] = ..., revoke: Optional[bool] = ..., min_date: Optional[datetime] = ..., max_date: Optional[datetime] = ...) -> None:
        """
        :returns messages.AffectedHistory: Instance of AffectedHistory.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class DeleteMessagesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, id: List[int], revoke: Optional[bool] = ...) -> None:
        """
        :returns messages.AffectedMessages: Instance of AffectedMessages.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class DeletePhoneCallHistoryRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, revoke: Optional[bool] = ...) -> None:
        """
        :returns messages.AffectedFoundMessages: Instance of AffectedFoundMessages.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class DeleteQuickReplyMessagesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, shortcut_id: int, id: List[int]) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class DeleteQuickReplyShortcutRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, shortcut_id: int) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class DeleteRevokedExportedChatInvitesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, admin_id: TypeInputUser) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class DeleteSavedHistoryRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, max_id: int, min_date: Optional[datetime] = ..., max_date: Optional[datetime] = ...) -> None:
        """
        :returns messages.AffectedHistory: Instance of AffectedHistory.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class DeleteScheduledMessagesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: List[int]) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class DiscardEncryptionRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, chat_id: int, delete_history: Optional[bool] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class EditChatAboutRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, about: str) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class EditChatAdminRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, chat_id: int, user_id: TypeInputUser, is_admin: bool) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class EditChatDefaultBannedRightsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, banned_rights: TypeChatBannedRights) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class EditChatPhotoRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, chat_id: int, photo: TypeInputChatPhoto) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class EditChatTitleRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, chat_id: int, title: str) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class EditExportedChatInviteRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, link: str, revoked: Optional[bool] = ..., expire_date: Optional[datetime] = ..., usage_limit: Optional[int] = ..., request_needed: Optional[bool] = ..., title: Optional[str] = ...) -> None:
        """
        :returns messages.ExportedChatInvite: Instance of either ExportedChatInvite, ExportedChatInviteReplaced.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class EditFactCheckRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, msg_id: int, text: TypeTextWithEntities) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class EditInlineBotMessageRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, id: TypeInputBotInlineMessageID, no_webpage: Optional[bool] = ..., invert_media: Optional[bool] = ..., message: Optional[str] = ..., media: Optional[TypeInputMedia] = ..., reply_markup: Optional[TypeReplyMarkup] = ..., entities: Optional[List[TypeMessageEntity]] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class EditMessageRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: int, no_webpage: Optional[bool] = ..., invert_media: Optional[bool] = ..., message: Optional[str] = ..., media: Optional[TypeInputMedia] = ..., reply_markup: Optional[TypeReplyMarkup] = ..., entities: Optional[List[TypeMessageEntity]] = ..., schedule_date: Optional[datetime] = ..., quick_reply_shortcut_id: Optional[int] = ...) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class EditQuickReplyShortcutRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, shortcut_id: int, shortcut: str) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ExportChatInviteRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, legacy_revoke_permanent: Optional[bool] = ..., request_needed: Optional[bool] = ..., expire_date: Optional[datetime] = ..., usage_limit: Optional[int] = ..., title: Optional[str] = ..., subscription_pricing: Optional[TypeStarsSubscriptionPricing] = ...) -> None:
        """
        :returns ExportedChatInvite: Instance of either ChatInviteExported, ChatInvitePublicJoinRequests.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class FaveStickerRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, id: TypeInputDocument, unfave: bool) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ForwardMessagesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, from_peer: TypeInputPeer, id: List[int], to_peer: TypeInputPeer, silent: Optional[bool] = ..., background: Optional[bool] = ..., with_my_score: Optional[bool] = ..., drop_author: Optional[bool] = ..., drop_media_captions: Optional[bool] = ..., noforwards: Optional[bool] = ..., allow_paid_floodskip: Optional[bool] = ..., random_id: List[int] = ..., top_msg_id: Optional[int] = ..., schedule_date: Optional[datetime] = ..., send_as: Optional[TypeInputPeer] = ..., quick_reply_shortcut: Optional[TypeInputQuickReplyShortcut] = ..., video_timestamp: Optional[int] = ..., allow_paid_stars: Optional[int] = ...) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetAdminsWithInvitesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer) -> None:
        """
        :returns messages.ChatAdminsWithInvites: Instance of ChatAdminsWithInvites.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetAllDraftsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetAllStickersRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: int) -> None:
        """
        :returns messages.AllStickers: Instance of either AllStickersNotModified, AllStickers.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetArchivedStickersRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, offset_id: int, limit: int, masks: Optional[bool] = ..., emojis: Optional[bool] = ...) -> None:
        """
        :returns messages.ArchivedStickers: Instance of ArchivedStickers.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetAttachMenuBotRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, bot: TypeInputUser) -> None:
        """
        :returns AttachMenuBotsBot: Instance of AttachMenuBotsBot.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetAttachMenuBotsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: int) -> None:
        """
        :returns AttachMenuBots: Instance of either AttachMenuBotsNotModified, AttachMenuBots.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetAttachedStickersRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, media: TypeInputStickeredMedia) -> None:
        """
        :returns Vector<StickerSetCovered>: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetAvailableEffectsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: int) -> None:
        """
        :returns messages.AvailableEffects: Instance of either AvailableEffectsNotModified, AvailableEffects.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetAvailableReactionsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: int) -> None:
        """
        :returns messages.AvailableReactions: Instance of either AvailableReactionsNotModified, AvailableReactions.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetBotAppRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, app: TypeInputBotApp, hash: int) -> None:
        """
        :returns messages.BotApp: Instance of BotApp.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetBotCallbackAnswerRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, msg_id: int, game: Optional[bool] = ..., data: Optional[bytes] = ..., password: Optional[TypeInputCheckPasswordSRP] = ...) -> None:
        """
        :returns messages.BotCallbackAnswer: Instance of BotCallbackAnswer.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetChatInviteImportersRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, offset_date: Optional[datetime], offset_user: TypeInputUser, limit: int, requested: Optional[bool] = ..., subscription_expired: Optional[bool] = ..., link: Optional[str] = ..., q: Optional[str] = ...) -> None:
        """
        :returns messages.ChatInviteImporters: Instance of ChatInviteImporters.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetChatsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, id: List[int]) -> None:
        """
        :returns messages.Chats: Instance of either Chats, ChatsSlice.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetCommonChatsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, user_id: TypeInputUser, max_id: int, limit: int) -> None:
        """
        :returns messages.Chats: Instance of either Chats, ChatsSlice.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetCustomEmojiDocumentsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, document_id: List[int]) -> None:
        """
        :returns Vector<Document>: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetDefaultHistoryTTLRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetDefaultTagReactionsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: int) -> None:
        """
        :returns messages.Reactions: Instance of either ReactionsNotModified, Reactions.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetDhConfigRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, version: int, random_length: int) -> None:
        """
        :returns messages.DhConfig: Instance of either DhConfigNotModified, DhConfig.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetDialogFiltersRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetDialogUnreadMarksRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetDialogsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, offset_date: Optional[datetime], offset_id: int, offset_peer: TypeInputPeer, limit: int, hash: int, exclude_pinned: Optional[bool] = ..., folder_id: Optional[int] = ...) -> None:
        """
        :returns messages.Dialogs: Instance of either Dialogs, DialogsSlice, DialogsNotModified.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetDiscussionMessageRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, msg_id: int) -> None:
        """
        :returns messages.DiscussionMessage: Instance of DiscussionMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetDocumentByHashRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, sha256: bytes, size: int, mime_type: str) -> None:
        """
        :returns Document: Instance of either DocumentEmpty, Document.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetEmojiGroupsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: int) -> None:
        """
        :returns messages.EmojiGroups: Instance of either EmojiGroupsNotModified, EmojiGroups.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetEmojiKeywordsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, lang_code: str) -> None:
        """
        :returns EmojiKeywordsDifference: Instance of EmojiKeywordsDifference.
        """
        ...
    
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetEmojiKeywordsDifferenceRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, lang_code: str, from_version: int) -> None:
        """
        :returns EmojiKeywordsDifference: Instance of EmojiKeywordsDifference.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetEmojiKeywordsLanguagesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, lang_codes: List[str]) -> None:
        """
        :returns Vector<EmojiLanguage>: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetEmojiProfilePhotoGroupsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: int) -> None:
        """
        :returns messages.EmojiGroups: Instance of either EmojiGroupsNotModified, EmojiGroups.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetEmojiStatusGroupsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: int) -> None:
        """
        :returns messages.EmojiGroups: Instance of either EmojiGroupsNotModified, EmojiGroups.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetEmojiStickerGroupsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: int) -> None:
        """
        :returns messages.EmojiGroups: Instance of either EmojiGroupsNotModified, EmojiGroups.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetEmojiStickersRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: int) -> None:
        """
        :returns messages.AllStickers: Instance of either AllStickersNotModified, AllStickers.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetEmojiURLRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, lang_code: str) -> None:
        """
        :returns EmojiURL: Instance of EmojiURL.
        """
        ...
    
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetExportedChatInviteRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, link: str) -> None:
        """
        :returns messages.ExportedChatInvite: Instance of either ExportedChatInvite, ExportedChatInviteReplaced.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetExportedChatInvitesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, admin_id: TypeInputUser, limit: int, revoked: Optional[bool] = ..., offset_date: Optional[datetime] = ..., offset_link: Optional[str] = ...) -> None:
        """
        :returns messages.ExportedChatInvites: Instance of ExportedChatInvites.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetExtendedMediaRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: List[int]) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetFactCheckRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, msg_id: List[int]) -> None:
        """
        :returns Vector<FactCheck>: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetFavedStickersRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: int) -> None:
        """
        :returns messages.FavedStickers: Instance of either FavedStickersNotModified, FavedStickers.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetFeaturedEmojiStickersRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: int) -> None:
        """
        :returns messages.FeaturedStickers: Instance of either FeaturedStickersNotModified, FeaturedStickers.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetFeaturedStickersRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: int) -> None:
        """
        :returns messages.FeaturedStickers: Instance of either FeaturedStickersNotModified, FeaturedStickers.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetFullChatRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, chat_id: int) -> None:
        """
        :returns messages.ChatFull: Instance of ChatFull.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetGameHighScoresRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: int, user_id: TypeInputUser) -> None:
        """
        :returns messages.HighScores: Instance of HighScores.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetHistoryRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, offset_id: int, offset_date: Optional[datetime], add_offset: int, limit: int, max_id: int, min_id: int, hash: int) -> None:
        """
        :returns messages.Messages: Instance of either Messages, MessagesSlice, ChannelMessages, MessagesNotModified.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetInlineBotResultsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, bot: TypeInputUser, peer: TypeInputPeer, query: str, offset: str, geo_point: Optional[TypeInputGeoPoint] = ...) -> None:
        """
        :returns messages.BotResults: Instance of BotResults.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetInlineGameHighScoresRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, id: TypeInputBotInlineMessageID, user_id: TypeInputUser) -> None:
        """
        :returns messages.HighScores: Instance of HighScores.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetMaskStickersRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: int) -> None:
        """
        :returns messages.AllStickers: Instance of either AllStickersNotModified, AllStickers.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetMessageEditDataRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: int) -> None:
        """
        :returns messages.MessageEditData: Instance of MessageEditData.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetMessageReactionsListRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: int, limit: int, reaction: Optional[TypeReaction] = ..., offset: Optional[str] = ...) -> None:
        """
        :returns messages.MessageReactionsList: Instance of MessageReactionsList.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetMessageReadParticipantsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, msg_id: int) -> None:
        """
        :returns Vector<ReadParticipantDate>: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetMessagesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, id: List[TypeInputMessage]) -> None:
        """
        :returns messages.Messages: Instance of either Messages, MessagesSlice, ChannelMessages, MessagesNotModified.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetMessagesReactionsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: List[int]) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetMessagesViewsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: List[int], increment: bool) -> None:
        """
        :returns messages.MessageViews: Instance of MessageViews.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetMyStickersRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, offset_id: int, limit: int) -> None:
        """
        :returns messages.MyStickers: Instance of MyStickers.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetOldFeaturedStickersRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, offset: int, limit: int, hash: int) -> None:
        """
        :returns messages.FeaturedStickers: Instance of either FeaturedStickersNotModified, FeaturedStickers.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetOnlinesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer) -> None:
        """
        :returns ChatOnlines: Instance of ChatOnlines.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetOutboxReadDateRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, msg_id: int) -> None:
        """
        :returns OutboxReadDate: Instance of OutboxReadDate.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetPaidReactionPrivacyRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetPeerDialogsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peers: List[TypeInputDialogPeer]) -> None:
        """
        :returns messages.PeerDialogs: Instance of PeerDialogs.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetPeerSettingsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer) -> None:
        """
        :returns messages.PeerSettings: Instance of PeerSettings.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetPinnedDialogsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, folder_id: int) -> None:
        """
        :returns messages.PeerDialogs: Instance of PeerDialogs.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetPinnedSavedDialogsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetPollResultsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, msg_id: int) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetPollVotesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: int, limit: int, option: Optional[bytes] = ..., offset: Optional[str] = ...) -> None:
        """
        :returns messages.VotesList: Instance of VotesList.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetPreparedInlineMessageRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, bot: TypeInputUser, id: str) -> None:
        """
        :returns messages.PreparedInlineMessage: Instance of PreparedInlineMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetQuickRepliesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: int) -> None:
        """
        :returns messages.QuickReplies: Instance of either QuickReplies, QuickRepliesNotModified.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetQuickReplyMessagesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, shortcut_id: int, hash: int, id: Optional[List[int]] = ...) -> None:
        """
        :returns messages.Messages: Instance of either Messages, MessagesSlice, ChannelMessages, MessagesNotModified.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetRecentLocationsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, limit: int, hash: int) -> None:
        """
        :returns messages.Messages: Instance of either Messages, MessagesSlice, ChannelMessages, MessagesNotModified.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetRecentReactionsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, limit: int, hash: int) -> None:
        """
        :returns messages.Reactions: Instance of either ReactionsNotModified, Reactions.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetRecentStickersRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: int, attached: Optional[bool] = ...) -> None:
        """
        :returns messages.RecentStickers: Instance of either RecentStickersNotModified, RecentStickers.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetRepliesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, msg_id: int, offset_id: int, offset_date: Optional[datetime], add_offset: int, limit: int, max_id: int, min_id: int, hash: int) -> None:
        """
        :returns messages.Messages: Instance of either Messages, MessagesSlice, ChannelMessages, MessagesNotModified.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetSavedDialogsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, offset_date: Optional[datetime], offset_id: int, offset_peer: TypeInputPeer, limit: int, hash: int, exclude_pinned: Optional[bool] = ...) -> None:
        """
        :returns messages.SavedDialogs: Instance of either SavedDialogs, SavedDialogsSlice, SavedDialogsNotModified.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetSavedGifsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: int) -> None:
        """
        :returns messages.SavedGifs: Instance of either SavedGifsNotModified, SavedGifs.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetSavedHistoryRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, offset_id: int, offset_date: Optional[datetime], add_offset: int, limit: int, max_id: int, min_id: int, hash: int) -> None:
        """
        :returns messages.Messages: Instance of either Messages, MessagesSlice, ChannelMessages, MessagesNotModified.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetSavedReactionTagsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: int, peer: Optional[TypeInputPeer] = ...) -> None:
        """
        :returns messages.SavedReactionTags: Instance of either SavedReactionTagsNotModified, SavedReactionTags.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetScheduledHistoryRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, hash: int) -> None:
        """
        :returns messages.Messages: Instance of either Messages, MessagesSlice, ChannelMessages, MessagesNotModified.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetScheduledMessagesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: List[int]) -> None:
        """
        :returns messages.Messages: Instance of either Messages, MessagesSlice, ChannelMessages, MessagesNotModified.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetSearchCountersRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, filters: List[TypeMessagesFilter], saved_peer_id: Optional[TypeInputPeer] = ..., top_msg_id: Optional[int] = ...) -> None:
        """
        :returns Vector<messages.SearchCounter>: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetSearchResultsCalendarRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, filter: TypeMessagesFilter, offset_id: int, offset_date: Optional[datetime], saved_peer_id: Optional[TypeInputPeer] = ...) -> None:
        """
        :returns messages.SearchResultsCalendar: Instance of SearchResultsCalendar.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetSearchResultsPositionsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, filter: TypeMessagesFilter, offset_id: int, limit: int, saved_peer_id: Optional[TypeInputPeer] = ...) -> None:
        """
        :returns messages.SearchResultsPositions: Instance of SearchResultsPositions.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetSplitRangesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetSponsoredMessagesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer) -> None:
        """
        :returns messages.SponsoredMessages: Instance of either SponsoredMessages, SponsoredMessagesEmpty.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetStickerSetRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, stickerset: TypeInputStickerSet, hash: int) -> None:
        """
        :returns messages.StickerSet: Instance of either StickerSet, StickerSetNotModified.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetStickersRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, emoticon: str, hash: int) -> None:
        """
        :returns messages.Stickers: Instance of either StickersNotModified, Stickers.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetSuggestedDialogFiltersRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetTopReactionsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, limit: int, hash: int) -> None:
        """
        :returns messages.Reactions: Instance of either ReactionsNotModified, Reactions.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetUnreadMentionsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, offset_id: int, add_offset: int, limit: int, max_id: int, min_id: int, top_msg_id: Optional[int] = ...) -> None:
        """
        :returns messages.Messages: Instance of either Messages, MessagesSlice, ChannelMessages, MessagesNotModified.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetUnreadReactionsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, offset_id: int, add_offset: int, limit: int, max_id: int, min_id: int, top_msg_id: Optional[int] = ...) -> None:
        """
        :returns messages.Messages: Instance of either Messages, MessagesSlice, ChannelMessages, MessagesNotModified.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetWebPageRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, url: str, hash: int) -> None:
        """
        :returns messages.WebPage: Instance of WebPage.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetWebPagePreviewRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, message: str, entities: Optional[List[TypeMessageEntity]] = ...) -> None:
        """
        :returns messages.WebPagePreview: Instance of WebPagePreview.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class HideAllChatJoinRequestsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, approved: Optional[bool] = ..., link: Optional[str] = ...) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class HideChatJoinRequestRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, user_id: TypeInputUser, approved: Optional[bool] = ...) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class HidePeerSettingsBarRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ImportChatInviteRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, hash: str) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class InitHistoryImportRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, file: TypeInputFile, media_count: int) -> None:
        """
        :returns messages.HistoryImport: Instance of HistoryImport.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class InstallStickerSetRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, stickerset: TypeInputStickerSet, archived: bool) -> None:
        """
        :returns messages.StickerSetInstallResult: Instance of either StickerSetInstallResultSuccess, StickerSetInstallResultArchive.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class MarkDialogUnreadRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputDialogPeer, unread: Optional[bool] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class MigrateChatRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, chat_id: int) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ProlongWebViewRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, bot: TypeInputUser, query_id: int, silent: Optional[bool] = ..., reply_to: Optional[TypeInputReplyTo] = ..., send_as: Optional[TypeInputPeer] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class RateTranscribedAudioRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, msg_id: int, transcription_id: int, good: bool) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ReadDiscussionRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, msg_id: int, read_max_id: int) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ReadEncryptedHistoryRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputEncryptedChat, max_date: Optional[datetime]) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ReadFeaturedStickersRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, id: List[int]) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ReadHistoryRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, max_id: int) -> None:
        """
        :returns messages.AffectedMessages: Instance of AffectedMessages.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ReadMentionsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, top_msg_id: Optional[int] = ...) -> None:
        """
        :returns messages.AffectedHistory: Instance of AffectedHistory.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ReadMessageContentsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, id: List[int]) -> None:
        """
        :returns messages.AffectedMessages: Instance of AffectedMessages.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ReadReactionsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, top_msg_id: Optional[int] = ...) -> None:
        """
        :returns messages.AffectedHistory: Instance of AffectedHistory.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ReceivedMessagesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, max_id: int) -> None:
        """
        :returns Vector<ReceivedNotifyMessage>: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ReceivedQueueRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, max_qts: int) -> None:
        """
        :returns Vector<long>: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    
    @staticmethod
    def read_result(reader): # -> list[Any]:
        ...
    


class ReorderPinnedDialogsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, folder_id: int, order: List[TypeInputDialogPeer], force: Optional[bool] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ReorderPinnedSavedDialogsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, order: List[TypeInputDialogPeer], force: Optional[bool] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ReorderQuickRepliesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, order: List[int]) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ReorderStickerSetsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, order: List[int], masks: Optional[bool] = ..., emojis: Optional[bool] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ReportRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: List[int], option: bytes, message: str) -> None:
        """
        :returns ReportResult: Instance of either ReportResultChooseOption, ReportResultAddComment, ReportResultReported.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ReportEncryptedSpamRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputEncryptedChat) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ReportMessagesDeliveryRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: List[int], push: Optional[bool] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ReportReactionRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: int, reaction_peer: TypeInputPeer) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ReportSpamRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ReportSponsoredMessageRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, option: bytes, random_id: bytes = ...) -> None:
        """
        :returns channels.SponsoredMessageReportResult: Instance of either SponsoredMessageReportResultChooseOption, SponsoredMessageReportResultAdsHidden, SponsoredMessageReportResultReported.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class RequestAppWebViewRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, app: TypeInputBotApp, platform: str, write_allowed: Optional[bool] = ..., compact: Optional[bool] = ..., fullscreen: Optional[bool] = ..., start_param: Optional[str] = ..., theme_params: Optional[TypeDataJSON] = ...) -> None:
        """
        :returns WebViewResult: Instance of WebViewResultUrl.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class RequestEncryptionRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, user_id: TypeInputUser, g_a: bytes, random_id: int = ...) -> None:
        """
        :returns EncryptedChat: Instance of either EncryptedChatEmpty, EncryptedChatWaiting, EncryptedChatRequested, EncryptedChat, EncryptedChatDiscarded.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class RequestMainWebViewRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, bot: TypeInputUser, platform: str, compact: Optional[bool] = ..., fullscreen: Optional[bool] = ..., start_param: Optional[str] = ..., theme_params: Optional[TypeDataJSON] = ...) -> None:
        """
        :returns WebViewResult: Instance of WebViewResultUrl.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class RequestSimpleWebViewRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, bot: TypeInputUser, platform: str, from_switch_webview: Optional[bool] = ..., from_side_menu: Optional[bool] = ..., compact: Optional[bool] = ..., fullscreen: Optional[bool] = ..., url: Optional[str] = ..., start_param: Optional[str] = ..., theme_params: Optional[TypeDataJSON] = ...) -> None:
        """
        :returns WebViewResult: Instance of WebViewResultUrl.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class RequestUrlAuthRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: Optional[TypeInputPeer] = ..., msg_id: Optional[int] = ..., button_id: Optional[int] = ..., url: Optional[str] = ...) -> None:
        """
        :returns UrlAuthResult: Instance of either UrlAuthResultRequest, UrlAuthResultAccepted, UrlAuthResultDefault.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class RequestWebViewRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, bot: TypeInputUser, platform: str, from_bot_menu: Optional[bool] = ..., silent: Optional[bool] = ..., compact: Optional[bool] = ..., fullscreen: Optional[bool] = ..., url: Optional[str] = ..., start_param: Optional[str] = ..., theme_params: Optional[TypeDataJSON] = ..., reply_to: Optional[TypeInputReplyTo] = ..., send_as: Optional[TypeInputPeer] = ...) -> None:
        """
        :returns WebViewResult: Instance of WebViewResultUrl.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SaveDefaultSendAsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, send_as: TypeInputPeer) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SaveDraftRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, message: str, no_webpage: Optional[bool] = ..., invert_media: Optional[bool] = ..., reply_to: Optional[TypeInputReplyTo] = ..., entities: Optional[List[TypeMessageEntity]] = ..., media: Optional[TypeInputMedia] = ..., effect: Optional[int] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SaveGifRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, id: TypeInputDocument, unsave: bool) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SavePreparedInlineMessageRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, result: TypeInputBotInlineResult, user_id: TypeInputUser, peer_types: Optional[List[TypeInlineQueryPeerType]] = ...) -> None:
        """
        :returns messages.BotPreparedInlineMessage: Instance of BotPreparedInlineMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SaveRecentStickerRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, id: TypeInputDocument, unsave: bool, attached: Optional[bool] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SearchRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, q: str, filter: TypeMessagesFilter, min_date: Optional[datetime], max_date: Optional[datetime], offset_id: int, add_offset: int, limit: int, max_id: int, min_id: int, hash: int, from_id: Optional[TypeInputPeer] = ..., saved_peer_id: Optional[TypeInputPeer] = ..., saved_reaction: Optional[List[TypeReaction]] = ..., top_msg_id: Optional[int] = ...) -> None:
        """
        :returns messages.Messages: Instance of either Messages, MessagesSlice, ChannelMessages, MessagesNotModified.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SearchCustomEmojiRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, emoticon: str, hash: int) -> None:
        """
        :returns EmojiList: Instance of either EmojiListNotModified, EmojiList.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SearchEmojiStickerSetsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, q: str, hash: int, exclude_featured: Optional[bool] = ...) -> None:
        """
        :returns messages.FoundStickerSets: Instance of either FoundStickerSetsNotModified, FoundStickerSets.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SearchGlobalRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, q: str, filter: TypeMessagesFilter, min_date: Optional[datetime], max_date: Optional[datetime], offset_rate: int, offset_peer: TypeInputPeer, offset_id: int, limit: int, broadcasts_only: Optional[bool] = ..., groups_only: Optional[bool] = ..., users_only: Optional[bool] = ..., folder_id: Optional[int] = ...) -> None:
        """
        :returns messages.Messages: Instance of either Messages, MessagesSlice, ChannelMessages, MessagesNotModified.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SearchSentMediaRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, q: str, filter: TypeMessagesFilter, limit: int) -> None:
        """
        :returns messages.Messages: Instance of either Messages, MessagesSlice, ChannelMessages, MessagesNotModified.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SearchStickerSetsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, q: str, hash: int, exclude_featured: Optional[bool] = ...) -> None:
        """
        :returns messages.FoundStickerSets: Instance of either FoundStickerSetsNotModified, FoundStickerSets.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SearchStickersRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, q: str, emoticon: str, lang_code: List[str], offset: int, limit: int, hash: int, emojis: Optional[bool] = ...) -> None:
        """
        :returns messages.FoundStickers: Instance of either FoundStickersNotModified, FoundStickers.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SendBotRequestedPeerRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, msg_id: int, button_id: int, requested_peers: List[TypeInputPeer]) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SendEncryptedRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputEncryptedChat, data: bytes, silent: Optional[bool] = ..., random_id: int = ...) -> None:
        """
        :returns messages.SentEncryptedMessage: Instance of either SentEncryptedMessage, SentEncryptedFile.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SendEncryptedFileRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputEncryptedChat, data: bytes, file: TypeInputEncryptedFile, silent: Optional[bool] = ..., random_id: int = ...) -> None:
        """
        :returns messages.SentEncryptedMessage: Instance of either SentEncryptedMessage, SentEncryptedFile.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SendEncryptedServiceRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputEncryptedChat, data: bytes, random_id: int = ...) -> None:
        """
        :returns messages.SentEncryptedMessage: Instance of either SentEncryptedMessage, SentEncryptedFile.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SendInlineBotResultRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, query_id: int, id: str, silent: Optional[bool] = ..., background: Optional[bool] = ..., clear_draft: Optional[bool] = ..., hide_via: Optional[bool] = ..., reply_to: Optional[TypeInputReplyTo] = ..., random_id: int = ..., schedule_date: Optional[datetime] = ..., send_as: Optional[TypeInputPeer] = ..., quick_reply_shortcut: Optional[TypeInputQuickReplyShortcut] = ..., allow_paid_stars: Optional[int] = ...) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SendMediaRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, media: TypeInputMedia, message: str, silent: Optional[bool] = ..., background: Optional[bool] = ..., clear_draft: Optional[bool] = ..., noforwards: Optional[bool] = ..., update_stickersets_order: Optional[bool] = ..., invert_media: Optional[bool] = ..., allow_paid_floodskip: Optional[bool] = ..., reply_to: Optional[TypeInputReplyTo] = ..., random_id: int = ..., reply_markup: Optional[TypeReplyMarkup] = ..., entities: Optional[List[TypeMessageEntity]] = ..., schedule_date: Optional[datetime] = ..., send_as: Optional[TypeInputPeer] = ..., quick_reply_shortcut: Optional[TypeInputQuickReplyShortcut] = ..., effect: Optional[int] = ..., allow_paid_stars: Optional[int] = ...) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SendMessageRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, message: str, no_webpage: Optional[bool] = ..., silent: Optional[bool] = ..., background: Optional[bool] = ..., clear_draft: Optional[bool] = ..., noforwards: Optional[bool] = ..., update_stickersets_order: Optional[bool] = ..., invert_media: Optional[bool] = ..., allow_paid_floodskip: Optional[bool] = ..., reply_to: Optional[TypeInputReplyTo] = ..., random_id: int = ..., reply_markup: Optional[TypeReplyMarkup] = ..., entities: Optional[List[TypeMessageEntity]] = ..., schedule_date: Optional[datetime] = ..., send_as: Optional[TypeInputPeer] = ..., quick_reply_shortcut: Optional[TypeInputQuickReplyShortcut] = ..., effect: Optional[int] = ..., allow_paid_stars: Optional[int] = ...) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SendMultiMediaRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, multi_media: List[TypeInputSingleMedia], silent: Optional[bool] = ..., background: Optional[bool] = ..., clear_draft: Optional[bool] = ..., noforwards: Optional[bool] = ..., update_stickersets_order: Optional[bool] = ..., invert_media: Optional[bool] = ..., allow_paid_floodskip: Optional[bool] = ..., reply_to: Optional[TypeInputReplyTo] = ..., schedule_date: Optional[datetime] = ..., send_as: Optional[TypeInputPeer] = ..., quick_reply_shortcut: Optional[TypeInputQuickReplyShortcut] = ..., effect: Optional[int] = ..., allow_paid_stars: Optional[int] = ...) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SendPaidReactionRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, msg_id: int, count: int, random_id: int = ..., private: Optional[TypePaidReactionPrivacy] = ...) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SendQuickReplyMessagesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, shortcut_id: int, id: List[int], random_id: List[int] = ...) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SendReactionRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, msg_id: int, big: Optional[bool] = ..., add_to_recent: Optional[bool] = ..., reaction: Optional[List[TypeReaction]] = ...) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SendScheduledMessagesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: List[int]) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SendScreenshotNotificationRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, reply_to: TypeInputReplyTo, random_id: int = ...) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SendVoteRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, msg_id: int, options: List[bytes]) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SendWebViewDataRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, bot: TypeInputUser, button_text: str, data: str, random_id: int = ...) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SendWebViewResultMessageRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, bot_query_id: str, result: TypeInputBotInlineResult) -> None:
        """
        :returns WebViewMessageSent: Instance of WebViewMessageSent.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SetBotCallbackAnswerRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, query_id: int, cache_time: int, alert: Optional[bool] = ..., message: Optional[str] = ..., url: Optional[str] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SetBotPrecheckoutResultsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, query_id: int, success: Optional[bool] = ..., error: Optional[str] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SetBotShippingResultsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, query_id: int, error: Optional[str] = ..., shipping_options: Optional[List[TypeShippingOption]] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SetChatAvailableReactionsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, available_reactions: TypeChatReactions, reactions_limit: Optional[int] = ..., paid_enabled: Optional[bool] = ...) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SetChatThemeRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, emoticon: str) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SetChatWallPaperRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, for_both: Optional[bool] = ..., revert: Optional[bool] = ..., wallpaper: Optional[TypeInputWallPaper] = ..., settings: Optional[TypeWallPaperSettings] = ..., id: Optional[int] = ...) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SetDefaultHistoryTTLRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, period: int) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SetDefaultReactionRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, reaction: TypeReaction) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SetEncryptedTypingRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputEncryptedChat, typing: bool) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SetGameScoreRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: int, user_id: TypeInputUser, score: int, edit_message: Optional[bool] = ..., force: Optional[bool] = ...) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SetHistoryTTLRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, period: int) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SetInlineBotResultsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, query_id: int, results: List[TypeInputBotInlineResult], cache_time: int, gallery: Optional[bool] = ..., private: Optional[bool] = ..., next_offset: Optional[str] = ..., switch_pm: Optional[TypeInlineBotSwitchPM] = ..., switch_webview: Optional[TypeInlineBotWebView] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SetInlineGameScoreRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, id: TypeInputBotInlineMessageID, user_id: TypeInputUser, score: int, edit_message: Optional[bool] = ..., force: Optional[bool] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SetTypingRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, action: TypeSendMessageAction, top_msg_id: Optional[int] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class StartBotRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, bot: TypeInputUser, peer: TypeInputPeer, start_param: str, random_id: int = ...) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class StartHistoryImportRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, import_id: int) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ToggleBotInAttachMenuRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, bot: TypeInputUser, enabled: bool, write_allowed: Optional[bool] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ToggleDialogFilterTagsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, enabled: bool) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ToggleDialogPinRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputDialogPeer, pinned: Optional[bool] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ToggleNoForwardsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, enabled: bool) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class TogglePaidReactionPrivacyRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, msg_id: int, private: TypePaidReactionPrivacy) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class TogglePeerTranslationsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, disabled: Optional[bool] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ToggleSavedDialogPinRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputDialogPeer, pinned: Optional[bool] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ToggleStickerSetsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, stickersets: List[TypeInputStickerSet], uninstall: Optional[bool] = ..., archive: Optional[bool] = ..., unarchive: Optional[bool] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class TranscribeAudioRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, msg_id: int) -> None:
        """
        :returns messages.TranscribedAudio: Instance of TranscribedAudio.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class TranslateTextRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, to_lang: str, peer: Optional[TypeInputPeer] = ..., id: Optional[List[int]] = ..., text: Optional[List[TypeTextWithEntities]] = ...) -> None:
        """
        :returns messages.TranslatedText: Instance of TranslateResult.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class UninstallStickerSetRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, stickerset: TypeInputStickerSet) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class UnpinAllMessagesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, top_msg_id: Optional[int] = ...) -> None:
        """
        :returns messages.AffectedHistory: Instance of AffectedHistory.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class UpdateDialogFilterRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, id: int, filter: Optional[TypeDialogFilter] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class UpdateDialogFiltersOrderRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, order: List[int]) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class UpdatePinnedMessageRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: int, silent: Optional[bool] = ..., unpin: Optional[bool] = ..., pm_oneside: Optional[bool] = ...) -> None:
        """
        :returns Updates: Instance of either UpdatesTooLong, UpdateShortMessage, UpdateShortChatMessage, UpdateShort, UpdatesCombined, Updates, UpdateShortSentMessage.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class UpdateSavedReactionTagRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, reaction: TypeReaction, title: Optional[str] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class UploadEncryptedFileRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputEncryptedChat, file: TypeInputEncryptedFile) -> None:
        """
        :returns EncryptedFile: Instance of either EncryptedFileEmpty, EncryptedFile.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class UploadImportedMediaRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, import_id: int, file_name: str, media: TypeInputMedia) -> None:
        """
        :returns MessageMedia: Instance of either MessageMediaEmpty, MessageMediaPhoto, MessageMediaGeo, MessageMediaContact, MessageMediaUnsupported, MessageMediaDocument, MessageMediaWebPage, MessageMediaVenue, MessageMediaGame, MessageMediaInvoice, MessageMediaGeoLive, MessageMediaPoll, MessageMediaDice, MessageMediaStory, MessageMediaGiveaway, MessageMediaGiveawayResults, MessageMediaPaidMedia.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class UploadMediaRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, media: TypeInputMedia, business_connection_id: Optional[str] = ...) -> None:
        """
        :returns MessageMedia: Instance of either MessageMediaEmpty, MessageMediaPhoto, MessageMediaGeo, MessageMediaContact, MessageMediaUnsupported, MessageMediaDocument, MessageMediaWebPage, MessageMediaVenue, MessageMediaGame, MessageMediaInvoice, MessageMediaGeoLive, MessageMediaPoll, MessageMediaDice, MessageMediaStory, MessageMediaGiveaway, MessageMediaGiveawayResults, MessageMediaPaidMedia.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class ViewSponsoredMessageRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, random_id: bytes = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


