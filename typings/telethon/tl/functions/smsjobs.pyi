"""
This type stub file was generated by pyright.
"""

from ...tl.tlobject import TLRequest
from typing import Optional

"""File generated by TLObjects' generator. All changes will be ERASED"""
class FinishJobRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, job_id: str, error: Optional[str] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetSmsJobRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, job_id: str) -> None:
        """
        :returns SmsJob: Instance of SmsJob.
        """
        ...
    
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetStatusRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class IsEligibleToJoinRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class JoinRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class LeaveRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class UpdateSettingsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, allow_international: Optional[bool] = ...) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


