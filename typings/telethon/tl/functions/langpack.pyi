"""
This type stub file was generated by pyright.
"""

from ...tl.tlobject import TLRequest
from typing import List

"""File generated by TLObjects' generator. All changes will be ERASED"""
class GetDifferenceRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, lang_pack: str, lang_code: str, from_version: int) -> None:
        """
        :returns LangPackDifference: Instance of LangPackDifference.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetLangPackRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, lang_pack: str, lang_code: str) -> None:
        """
        :returns LangPackDifference: Instance of LangPackDifference.
        """
        ...
    
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetLanguageRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, lang_pack: str, lang_code: str) -> None:
        """
        :returns LangPackLanguage: Instance of LangPackLanguage.
        """
        ...
    
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetLanguagesRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, lang_pack: str) -> None:
        """
        :returns Vector<LangPackLanguage>: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetStringsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, lang_pack: str, lang_code: str, keys: List[str]) -> None:
        """
        :returns Vector<LangPackString>: This type has no constructors.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


