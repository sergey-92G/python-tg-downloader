"""
This type stub file was generated by pyright.
"""

from ...tl.tlobject import TLRequest
from typing import List, Optional, TYPE_CHECKING
from ...tl.types import TypeInputFile, TypeInputPhoto, TypeInputUser, TypeVideoSize

"""File generated by TLObjects' generator. All changes will be ERASED"""
if TYPE_CHECKING:
    ...
class DeletePhotosRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, id: List[TypeInputPhoto]) -> None:
        """
        :returns Vector<long>: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    
    @staticmethod
    def read_result(reader): # -> list[Any]:
        ...
    


class GetUserPhotosRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, user_id: TypeInputUser, offset: int, max_id: int, limit: int) -> None:
        """
        :returns photos.Photos: Instance of either Photos, PhotosSlice.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class UpdateProfilePhotoRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, id: TypeInputPhoto, fallback: Optional[bool] = ..., bot: Optional[TypeInputUser] = ...) -> None:
        """
        :returns photos.Photo: Instance of Photo.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class UploadContactProfilePhotoRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, user_id: TypeInputUser, suggest: Optional[bool] = ..., save: Optional[bool] = ..., file: Optional[TypeInputFile] = ..., video: Optional[TypeInputFile] = ..., video_start_ts: Optional[float] = ..., video_emoji_markup: Optional[TypeVideoSize] = ...) -> None:
        """
        :returns photos.Photo: Instance of Photo.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class UploadProfilePhotoRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, fallback: Optional[bool] = ..., bot: Optional[TypeInputUser] = ..., file: Optional[TypeInputFile] = ..., video: Optional[TypeInputFile] = ..., video_start_ts: Optional[float] = ..., video_emoji_markup: Optional[TypeVideoSize] = ...) -> None:
        """
        :returns photos.Photo: Instance of Photo.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


