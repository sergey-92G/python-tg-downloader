"""
This type stub file was generated by pyright.
"""

from ...tl.tlobject import TLRequest
from typing import List, TYPE_CHECKING
from ...tl.types import TypeInputUser, TypeSecureValueError

"""File generated by TLObjects' generator. All changes will be ERASED"""
if TYPE_CHECKING:
    ...
class GetFullUserRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, id: TypeInputUser) -> None:
        """
        :returns users.UserFull: Instance of UserFull.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetRequirementsToContactRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, id: List[TypeInputUser]) -> None:
        """
        :returns Vector<RequirementToContact>: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetUsersRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, id: List[TypeInputUser]) -> None:
        """
        :returns Vector<User>: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class SetSecureValueErrorsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, id: TypeInputUser, errors: List[TypeSecureValueError]) -> None:
        """
        :returns Bool: This type has no constructors.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


