"""
This type stub file was generated by pyright.
"""

from ...tl.tlobject import TLRequest
from typing import Optional, TYPE_CHECKING
from ...tl.types import TypeInputChannel, TypeInputCheckPasswordSRP, TypeInputPeer

"""File generated by TLObjects' generator. All changes will be ERASED"""
if TYPE_CHECKING:
    ...
class GetBroadcastRevenueStatsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, dark: Optional[bool] = ...) -> None:
        """
        :returns stats.BroadcastRevenueStats: Instance of BroadcastRevenueStats.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetBroadcastRevenueTransactionsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, offset: int, limit: int) -> None:
        """
        :returns stats.BroadcastRevenueTransactions: Instance of BroadcastRevenueTransactions.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetBroadcastRevenueWithdrawalUrlRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, password: TypeInputCheckPasswordSRP) -> None:
        """
        :returns stats.BroadcastRevenueWithdrawalUrl: Instance of BroadcastRevenueWithdrawalUrl.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetBroadcastStatsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, channel: TypeInputChannel, dark: Optional[bool] = ...) -> None:
        """
        :returns stats.BroadcastStats: Instance of BroadcastStats.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetMegagroupStatsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, channel: TypeInputChannel, dark: Optional[bool] = ...) -> None:
        """
        :returns stats.MegagroupStats: Instance of MegagroupStats.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetMessagePublicForwardsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, channel: TypeInputChannel, msg_id: int, offset: str, limit: int) -> None:
        """
        :returns stats.PublicForwards: Instance of PublicForwards.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetMessageStatsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, channel: TypeInputChannel, msg_id: int, dark: Optional[bool] = ...) -> None:
        """
        :returns stats.MessageStats: Instance of MessageStats.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetStoryPublicForwardsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: int, offset: str, limit: int) -> None:
        """
        :returns stats.PublicForwards: Instance of PublicForwards.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class GetStoryStatsRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, peer: TypeInputPeer, id: int, dark: Optional[bool] = ...) -> None:
        """
        :returns stats.StoryStats: Instance of StoryStats.
        """
        ...
    
    async def resolve(self, client, utils): # -> None:
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


class LoadAsyncGraphRequest(TLRequest):
    CONSTRUCTOR_ID = ...
    SUBCLASS_OF_ID = ...
    def __init__(self, token: str, x: Optional[int] = ...) -> None:
        """
        :returns StatsGraph: Instance of either StatsGraphAsync, StatsGraphError, StatsGraph.
        """
        ...
    
    def to_dict(self): # -> dict[str, Any]:
        ...
    
    @classmethod
    def from_reader(cls, reader): # -> Self:
        ...
    


