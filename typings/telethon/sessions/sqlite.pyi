"""
This type stub file was generated by pyright.
"""

from .memory import MemorySession

sqlite3_err = ...
EXTENSION = ...
CURRENT_VERSION = ...
class SQLiteSession(MemorySession):
    """This session contains the required information to login into your
       Telegram account. NEVER give the saved session file to anyone, since
       they would gain instant access to all your messages and contacts.

       If you think the session has been compromised, close all the sessions
       through an official Telegram client to revoke the authorization.
    """
    def __init__(self, session_id=...) -> None:
        ...
    
    def clone(self, to_instance=...): # -> Self:
        ...
    
    def set_dc(self, dc_id, server_address, port): # -> None:
        ...
    
    @MemorySession.auth_key.setter
    def auth_key(self, value): # -> None:
        ...
    
    @MemorySession.takeout_id.setter
    def takeout_id(self, value): # -> None:
        ...
    
    def get_update_state(self, entity_id): # -> State | None:
        ...
    
    def set_update_state(self, entity_id, state): # -> None:
        ...
    
    def get_update_states(self): # -> Generator[tuple[Any, State], None, None]:
        ...
    
    def save(self): # -> None:
        """Saves the current session object as session_user_id.session"""
        ...
    
    def close(self): # -> None:
        """Closes the connection unless we're working in-memory"""
        ...
    
    def delete(self): # -> bool:
        """Deletes the current session file"""
        ...
    
    @classmethod
    def list_sessions(cls): # -> list[str]:
        """Lists all the sessions of the users who have ever connected
           using this client and never logged out
        """
        ...
    
    def process_entities(self, tlo): # -> None:
        """
        Processes all the found entities on the given TLObject,
        unless .save_entities is False.
        """
        ...
    
    def get_entity_rows_by_phone(self, phone): # -> Any:
        ...
    
    def get_entity_rows_by_username(self, username): # -> tuple[Any, Any] | None:
        ...
    
    def get_entity_rows_by_name(self, name): # -> Any:
        ...
    
    def get_entity_rows_by_id(self, id, exact=...): # -> Any:
        ...
    
    def get_file(self, md5_digest, file_size, cls): # -> None:
        ...
    
    def cache_file(self, md5_digest, file_size, instance): # -> None:
        ...
    


