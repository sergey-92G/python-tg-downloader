"""
This type stub file was generated by pyright.
"""

from .connection import ObfuscatedConnection
from .tcpabridged import AbridgedPacketCodec
from .tcpintermediate import IntermediatePacketCodec, RandomizedIntermediatePacketCodec

class MTProxyIO:
    """
    It's very similar to tcpobfuscated.ObfuscatedIO, but the way
    encryption keys, protocol tag and dc_id are encoded is different.
    """
    header = ...
    def __init__(self, connection) -> None:
        ...
    
    @staticmethod
    def init_header(secret, dc_id, packet_codec): # -> tuple[Any, AESModeCTR, AESModeCTR]:
        ...
    
    async def readexactly(self, n): # -> bytes:
        ...
    
    def write(self, data): # -> None:
        ...
    


class TcpMTProxy(ObfuscatedConnection):
    """
    Connector which allows user to connect to the Telegram via proxy servers
    commonly known as MTProxy.
    Implemented very ugly due to the leaky abstractions in Telethon networking
    classes that should be refactored later (TODO).

    .. warning::

        The support for TcpMTProxy classes is **EXPERIMENTAL** and prone to
        be changed. You shouldn't be using this class yet.
    """
    packet_codec = ...
    obfuscated_io = MTProxyIO
    def __init__(self, ip, port, dc_id, *, loggers, proxy=..., local_addr=...) -> None:
        ...
    
    @staticmethod
    def address_info(proxy_info):
        ...
    
    @staticmethod
    def normalize_secret(secret): # -> bytes:
        ...
    


class ConnectionTcpMTProxyAbridged(TcpMTProxy):
    """
    Connect to proxy using abridged protocol
    """
    packet_codec = AbridgedPacketCodec


class ConnectionTcpMTProxyIntermediate(TcpMTProxy):
    """
    Connect to proxy using intermediate protocol
    """
    packet_codec = IntermediatePacketCodec


class ConnectionTcpMTProxyRandomizedIntermediate(TcpMTProxy):
    """
    Connect to proxy using randomized intermediate protocol (dd-secrets)
    """
    packet_codec = RandomizedIntermediatePacketCodec


