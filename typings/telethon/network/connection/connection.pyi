"""
This type stub file was generated by pyright.
"""

import abc

class Connection(abc.ABC):
    """
    The `Connection` class is a wrapper around ``asyncio.open_connection``.

    Subclasses will implement different transport modes as atomic operations,
    which this class eases doing since the exposed interface simply puts and
    gets complete data payloads to and from queues.

    The only error that will raise from send and receive methods is
    ``ConnectionError``, which will raise when attempting to send if
    the client is disconnected (includes remote disconnections).
    """
    packet_codec = ...
    def __init__(self, ip, port, dc_id, *, loggers, proxy=..., local_addr=...) -> None:
        ...
    
    async def connect(self, timeout=..., ssl=...): # -> None:
        """
        Establishes a connection with the server.
        """
        ...
    
    async def disconnect(self): # -> None:
        """
        Disconnects from the server, and clears
        pending outgoing and incoming messages.
        """
        ...
    
    def send(self, data): # -> CoroutineType[Any, Any, None]:
        """
        Sends a packet of data through this connection mode.

        This method returns a coroutine.
        """
        ...
    
    async def recv(self):
        """
        Receives a packet of data through this connection mode.

        This method returns a coroutine.
        """
        ...
    
    def __str__(self) -> str:
        ...
    


class ObfuscatedConnection(Connection):
    """
    Base class for "obfuscated" connections ("obfuscated2", "mtproto proxy")
    """
    obfuscated_io = ...


class PacketCodec(abc.ABC):
    """
    Base class for packet codecs
    """
    tag = ...
    def __init__(self, connection) -> None:
        """
        Codec is created when connection is just made.
        """
        ...
    
    @abc.abstractmethod
    def encode_packet(self, data):
        """
        Encodes single packet and returns encoded bytes.
        """
        ...
    
    @abc.abstractmethod
    async def read_packet(self, reader):
        """
        Reads single packet from `reader` object that should have
        `readexactly(n)` method.
        """
        ...
    


