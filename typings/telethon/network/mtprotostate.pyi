"""
This type stub file was generated by pyright.
"""

from ..tl.tlobject import TLRequest

MAX_RECENT_MSG_IDS = ...
MSG_TOO_NEW_DELTA = ...
MSG_TOO_OLD_DELTA = ...
MAX_CONSECUTIVE_IGNORED = ...
class _OpaqueRequest(TLRequest):
    """
    Wraps a serialized request into a type that can be serialized again.
    """
    def __init__(self, data: bytes) -> None:
        ...
    


class MTProtoState:
    """
    `telethon.network.mtprotosender.MTProtoSender` needs to hold a state
    in order to be able to encrypt and decrypt incoming/outgoing messages,
    as well as generating the message IDs. Instances of this class hold
    together all the required information.

    It doesn't make sense to use `telethon.sessions.abstract.Session` for
    the sender because the sender should *not* be concerned about storing
    this information to disk, as one may create as many senders as they
    desire to any other data center, or some CDN. Using the same session
    for all these is not a good idea as each need their own authkey, and
    the concept of "copying" sessions with the unnecessary entities or
    updates state for these connections doesn't make sense.

    While it would be possible to have a `MTProtoPlainState` that does no
    encryption so that it was usable through the `MTProtoLayer` and thus
    avoid the need for a `MTProtoPlainSender`, the `MTProtoLayer` is more
    focused to efficiency and this state is also more advanced (since it
    supports gzipping and invoking after other message IDs). There are too
    many methods that would be needed to make it convenient to use for the
    authentication process, at which point the `MTProtoPlainSender` is better.
    """
    def __init__(self, auth_key, loggers) -> None:
        ...
    
    def reset(self): # -> None:
        """
        Resets the state.
        """
        ...
    
    def update_message_id(self, message): # -> None:
        """
        Updates the message ID to a new one,
        used when the time offset changed.
        """
        ...
    
    def write_data_as_message(self, buffer, data, content_related, *, after_id=...): # -> int:
        """
        Writes a message containing the given data into buffer.

        Returns the message id.
        """
        ...
    
    def encrypt_message_data(self, data): # -> bytes:
        """
        Encrypts the given message data using the current authorization key
        following MTProto 2.0 guidelines core.telegram.org/mtproto/description.
        """
        ...
    
    def decrypt_message_data(self, body): # -> TLMessage | None:
        """
        Inverse of `encrypt_message_data` for incoming server messages.
        """
        ...
    
    def update_time_offset(self, correct_msg_id):
        """
        Updates the time offset to the correct
        one given a known valid message ID.
        """
        ...
    


